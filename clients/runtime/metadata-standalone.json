[
  1635018093,
  {
    "V14": {
      "types": {
        "types": [
          {
            "id": 0,
            "type": {
              "path": [
                "sp_core",
                "crypto",
                "AccountId32"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 1,
            "type": {
              "def": {
                "array": {
                  "len": 32,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 2,
            "type": {
              "def": {
                "primitive": "u8"
              }
            }
          },
          {
            "id": 3,
            "type": {
              "path": [
                "frame_system",
                "AccountInfo"
              ],
              "params": [
                {
                  "name": "Index",
                  "type": 4
                },
                {
                  "name": "AccountData",
                  "type": 5
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "nonce",
                      "type": 4,
                      "typeName": "Index"
                    },
                    {
                      "name": "consumers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "providers",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "sufficients",
                      "type": 4,
                      "typeName": "RefCount"
                    },
                    {
                      "name": "data",
                      "type": 5,
                      "typeName": "AccountData"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 4,
            "type": {
              "def": {
                "primitive": "u32"
              }
            }
          },
          {
            "id": 5,
            "type": {
              "path": [
                "pallet_balances",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "misc_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "fee_frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 6,
            "type": {
              "def": {
                "primitive": "u128"
              }
            }
          },
          {
            "id": 7,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 8,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 8,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 8,
            "type": {
              "path": [
                "sp_weights",
                "weight_v2",
                "Weight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "ref_time",
                      "type": 9,
                      "typeName": "u64"
                    },
                    {
                      "name": "proof_size",
                      "type": 9,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 9,
            "type": {
              "def": {
                "compact": {
                  "type": 10
                }
              }
            }
          },
          {
            "id": 10,
            "type": {
              "def": {
                "primitive": "u64"
              }
            }
          },
          {
            "id": 11,
            "type": {
              "path": [
                "primitive_types",
                "H256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 12,
            "type": {
              "def": {
                "sequence": {
                  "type": 2
                }
              }
            }
          },
          {
            "id": 13,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "Digest"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "logs",
                      "type": 14,
                      "typeName": "Vec<DigestItem>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 14,
            "type": {
              "def": {
                "sequence": {
                  "type": 15
                }
              }
            }
          },
          {
            "id": 15,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "digest",
                "DigestItem"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PreRuntime",
                      "fields": [
                        {
                          "type": 16,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Consensus",
                      "fields": [
                        {
                          "type": 16,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Seal",
                      "fields": [
                        {
                          "type": 16,
                          "typeName": "ConsensusEngineId"
                        },
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Other",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "RuntimeEnvironmentUpdated",
                      "index": 8
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 16,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 17,
            "type": {
              "def": {
                "sequence": {
                  "type": 18
                }
              }
            }
          },
          {
            "id": 18,
            "type": {
              "path": [
                "frame_system",
                "EventRecord"
              ],
              "params": [
                {
                  "name": "E",
                  "type": 19
                },
                {
                  "name": "T",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "phase",
                      "type": 81,
                      "typeName": "Phase"
                    },
                    {
                      "name": "event",
                      "type": 19,
                      "typeName": "E"
                    },
                    {
                      "name": "topics",
                      "type": 82,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 19,
            "type": {
              "path": [
                "spacewalk_runtime_standalone",
                "RuntimeEvent"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 20,
                          "typeName": "frame_system::Event<Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 29,
                          "typeName": "pallet_grandpa::Event"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 34,
                          "typeName": "pallet_sudo::Event<Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 38,
                          "typeName": "orml_tokens::Event<Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 44,
                          "typeName": "pallet_balances::Event<Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "TransactionPayment",
                      "fields": [
                        {
                          "type": 45,
                          "typeName": "pallet_transaction_payment::Event<Runtime>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "StellarRelay",
                      "fields": [
                        {
                          "type": 46,
                          "typeName": "stellar_relay::Event<Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "VaultRewards",
                      "fields": [
                        {
                          "type": 47,
                          "typeName": "reward::Event<Runtime>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "VaultStaking",
                      "fields": [
                        {
                          "type": 52,
                          "typeName": "staking::Event<Runtime>"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Security",
                      "fields": [
                        {
                          "type": 53,
                          "typeName": "security::Event<Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "VaultRegistry",
                      "fields": [
                        {
                          "type": 57,
                          "typeName": "vault_registry::Event<Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Oracle",
                      "fields": [
                        {
                          "type": 60,
                          "typeName": "oracle::Event<Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Issue",
                      "fields": [
                        {
                          "type": 66,
                          "typeName": "issue::Event<Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Redeem",
                      "fields": [
                        {
                          "type": 68,
                          "typeName": "redeem::Event<Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Replace",
                      "fields": [
                        {
                          "type": 70,
                          "typeName": "replace::Event<Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Nomination",
                      "fields": [
                        {
                          "type": 71,
                          "typeName": "nomination::Event<Runtime>"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "DiaOracleModule",
                      "fields": [
                        {
                          "type": 72,
                          "typeName": "dia_oracle::Event<Runtime>"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ClientsInfo",
                      "fields": [
                        {
                          "type": 77,
                          "typeName": "clients_info::Event<Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "RewardDistribution",
                      "fields": [
                        {
                          "type": 80,
                          "typeName": "reward_distribution::Event<Runtime>"
                        }
                      ],
                      "index": 31
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 20,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExtrinsicSuccess",
                      "fields": [
                        {
                          "name": "dispatch_info",
                          "type": 21,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An extrinsic completed successfully."
                      ]
                    },
                    {
                      "name": "ExtrinsicFailed",
                      "fields": [
                        {
                          "name": "dispatch_error",
                          "type": 24,
                          "typeName": "DispatchError"
                        },
                        {
                          "name": "dispatch_info",
                          "type": 21,
                          "typeName": "DispatchInfo"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An extrinsic failed."
                      ]
                    },
                    {
                      "name": "CodeUpdated",
                      "index": 2,
                      "docs": [
                        "`:code` was updated."
                      ]
                    },
                    {
                      "name": "NewAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A new account was created."
                      ]
                    },
                    {
                      "name": "KilledAccount",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "An account was reaped."
                      ]
                    },
                    {
                      "name": "Remarked",
                      "fields": [
                        {
                          "name": "sender",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "hash",
                          "type": 11,
                          "typeName": "T::Hash"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "On on-chain remark happened."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Event for the System pallet."
              ]
            }
          },
          {
            "id": 21,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "weight",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "class",
                      "type": 22,
                      "typeName": "DispatchClass"
                    },
                    {
                      "name": "pays_fee",
                      "type": 23,
                      "typeName": "Pays"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 22,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "DispatchClass"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Normal",
                      "index": 0
                    },
                    {
                      "name": "Operational",
                      "index": 1
                    },
                    {
                      "name": "Mandatory",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 23,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "Pays"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Yes",
                      "index": 0
                    },
                    {
                      "name": "No",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 24,
            "type": {
              "path": [
                "sp_runtime",
                "DispatchError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Other",
                      "index": 0
                    },
                    {
                      "name": "CannotLookup",
                      "index": 1
                    },
                    {
                      "name": "BadOrigin",
                      "index": 2
                    },
                    {
                      "name": "Module",
                      "fields": [
                        {
                          "type": 25,
                          "typeName": "ModuleError"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ConsumerRemaining",
                      "index": 4
                    },
                    {
                      "name": "NoProviders",
                      "index": 5
                    },
                    {
                      "name": "TooManyConsumers",
                      "index": 6
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 26,
                          "typeName": "TokenError"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Arithmetic",
                      "fields": [
                        {
                          "type": 27,
                          "typeName": "ArithmeticError"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Transactional",
                      "fields": [
                        {
                          "type": 28,
                          "typeName": "TransactionalError"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Exhausted",
                      "index": 10
                    },
                    {
                      "name": "Corruption",
                      "index": 11
                    },
                    {
                      "name": "Unavailable",
                      "index": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 25,
            "type": {
              "path": [
                "sp_runtime",
                "ModuleError"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "index",
                      "type": 2,
                      "typeName": "u8"
                    },
                    {
                      "name": "error",
                      "type": 16,
                      "typeName": "[u8; MAX_MODULE_ERROR_ENCODED_SIZE]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 26,
            "type": {
              "path": [
                "sp_runtime",
                "TokenError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoFunds",
                      "index": 0
                    },
                    {
                      "name": "WouldDie",
                      "index": 1
                    },
                    {
                      "name": "BelowMinimum",
                      "index": 2
                    },
                    {
                      "name": "CannotCreate",
                      "index": 3
                    },
                    {
                      "name": "UnknownAsset",
                      "index": 4
                    },
                    {
                      "name": "Frozen",
                      "index": 5
                    },
                    {
                      "name": "Unsupported",
                      "index": 6
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 27,
            "type": {
              "path": [
                "sp_arithmetic",
                "ArithmeticError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Underflow",
                      "index": 0
                    },
                    {
                      "name": "Overflow",
                      "index": 1
                    },
                    {
                      "name": "DivisionByZero",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 28,
            "type": {
              "path": [
                "sp_runtime",
                "TransactionalError"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "LimitReached",
                      "index": 0
                    },
                    {
                      "name": "NoLayer",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 29,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Event"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NewAuthorities",
                      "fields": [
                        {
                          "name": "authority_set",
                          "type": 30,
                          "typeName": "AuthorityList"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "New authority set has been applied."
                      ]
                    },
                    {
                      "name": "Paused",
                      "index": 1,
                      "docs": [
                        "Current authority set has been paused."
                      ]
                    },
                    {
                      "name": "Resumed",
                      "index": 2,
                      "docs": [
                        "Current authority set has been resumed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 30,
            "type": {
              "def": {
                "sequence": {
                  "type": 31
                }
              }
            }
          },
          {
            "id": 31,
            "type": {
              "def": {
                "tuple": [
                  32,
                  10
                ]
              }
            }
          },
          {
            "id": 32,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "app",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 33,
                      "typeName": "ed25519::Public"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 33,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Public"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 1,
                      "typeName": "[u8; 32]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 34,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Sudid",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 35,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    },
                    {
                      "name": "KeyChanged",
                      "fields": [
                        {
                          "name": "old_sudoer",
                          "type": 37,
                          "typeName": "Option<T::AccountId>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."
                      ]
                    },
                    {
                      "name": "SudoAsDone",
                      "fields": [
                        {
                          "name": "sudo_result",
                          "type": 35,
                          "typeName": "DispatchResult"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A sudo just took place. \\[result\\]"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 35,
            "type": {
              "path": [
                "Result"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 36
                },
                {
                  "name": "E",
                  "type": 24
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ok",
                      "fields": [
                        {
                          "type": 36
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Err",
                      "fields": [
                        {
                          "type": 24
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 36,
            "type": {
              "def": {
                "tuple": []
              }
            }
          },
          {
            "id": 37,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 0
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 0
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 38,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below",
                        "ExistentialDeposit, resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "status",
                          "type": 42,
                          "typeName": "BalanceStatus"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some reserved balance was repatriated (moved from reserved to",
                        "another account)."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "TotalIssuanceSet",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "The total issuance of an currency has been set"
                      ]
                    },
                    {
                      "name": "Withdrawn",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some balances were withdrawn (e.g. pay for transaction fee)"
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved_amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some balances were slashed (e.g. due to mis-behavior)"
                      ]
                    },
                    {
                      "name": "Deposited",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Deposited some balance into an account"
                      ]
                    },
                    {
                      "name": "LockSet",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 43,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Some funds are locked"
                      ]
                    },
                    {
                      "name": "LockRemoved",
                      "fields": [
                        {
                          "name": "lock_id",
                          "type": 43,
                          "typeName": "LockIdentifier"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Some locked funds were unlocked"
                      ]
                    },
                    {
                      "name": "Locked",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 13,
                      "docs": [
                        "Some free balance was locked."
                      ]
                    },
                    {
                      "name": "Unlocked",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 14,
                      "docs": [
                        "Some locked balance was freed."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 39,
            "type": {
              "path": [
                "spacewalk_primitives",
                "CurrencyId"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Native",
                      "index": 0
                    },
                    {
                      "name": "XCM",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Stellar",
                      "fields": [
                        {
                          "type": 40,
                          "typeName": "Asset"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ZenlinkLPToken",
                      "fields": [
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        },
                        {
                          "type": 2,
                          "typeName": "u8"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Token",
                      "fields": [
                        {
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 40,
            "type": {
              "path": [
                "spacewalk_primitives",
                "Asset"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "StellarNative",
                      "index": 0
                    },
                    {
                      "name": "AlphaNum4",
                      "fields": [
                        {
                          "name": "code",
                          "type": 16,
                          "typeName": "Bytes4"
                        },
                        {
                          "name": "issuer",
                          "type": 1,
                          "typeName": "AssetIssuer"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AlphaNum12",
                      "fields": [
                        {
                          "name": "code",
                          "type": 41,
                          "typeName": "Bytes12"
                        },
                        {
                          "name": "issuer",
                          "type": 1,
                          "typeName": "AssetIssuer"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 41,
            "type": {
              "def": {
                "array": {
                  "len": 12,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 42,
            "type": {
              "path": [
                "frame_support",
                "traits",
                "tokens",
                "misc",
                "BalanceStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Free",
                      "index": 0
                    },
                    {
                      "name": "Reserved",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 43,
            "type": {
              "def": {
                "array": {
                  "len": 8,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 44,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Endowed",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free_balance",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "An account was created with some free balance."
                      ]
                    },
                    {
                      "name": "DustLost",
                      "fields": [
                        {
                          "name": "account",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "An account was removed whose balance was non-zero but below ExistentialDeposit,",
                        "resulting in an outright loss."
                      ]
                    },
                    {
                      "name": "Transfer",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Transfer succeeded."
                      ]
                    },
                    {
                      "name": "BalanceSet",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "free",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "reserved",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "A balance was set by root."
                      ]
                    },
                    {
                      "name": "Reserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Some balance was reserved (moved from free to reserved)."
                      ]
                    },
                    {
                      "name": "Unreserved",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Some balance was unreserved (moved from reserved to free)."
                      ]
                    },
                    {
                      "name": "ReserveRepatriated",
                      "fields": [
                        {
                          "name": "from",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "to",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "destination_status",
                          "type": 42,
                          "typeName": "Status"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Some balance was moved from the reserve of the first account to the second account.",
                        "Final argument indicates the destination balance type."
                      ]
                    },
                    {
                      "name": "Deposit",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Some amount was deposited (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Withdraw",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Some amount was withdrawn from the account (e.g. for transaction fees)."
                      ]
                    },
                    {
                      "name": "Slashed",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Some amount was removed from the account (e.g. for misbehavior)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 45,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TransactionFeePaid",
                      "fields": [
                        {
                          "name": "who",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "actual_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "tip",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,",
                        "has been paid by `who`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 46,
            "type": {
              "path": [
                "stellar_relay",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UpdateTier1ValidatorSet",
                      "fields": [
                        {
                          "name": "new_validators_enactment_block_height",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 47,
            "type": {
              "path": [
                "reward",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DepositStake",
                      "fields": [
                        {
                          "name": "reward_id",
                          "type": 48,
                          "typeName": "T::RewardId"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DistributeReward",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "WithdrawStake",
                      "fields": [
                        {
                          "name": "reward_id",
                          "type": 48,
                          "typeName": "T::RewardId"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "WithdrawReward",
                      "fields": [
                        {
                          "name": "reward_id",
                          "type": 48,
                          "typeName": "T::RewardId"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 48,
            "type": {
              "path": [
                "spacewalk_primitives",
                "VaultId"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "CurrencyId",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "account_id",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "currencies",
                      "type": 49,
                      "typeName": "VaultCurrencyPair<CurrencyId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 49,
            "type": {
              "path": [
                "spacewalk_primitives",
                "VaultCurrencyPair"
              ],
              "params": [
                {
                  "name": "CurrencyId",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "collateral",
                      "type": 39,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "wrapped",
                      "type": 39,
                      "typeName": "CurrencyId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 50,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedI128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 51,
                      "typeName": "i128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 51,
            "type": {
              "def": {
                "primitive": "i128"
              }
            }
          },
          {
            "id": 52,
            "type": {
              "path": [
                "staking",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "DepositStake",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DistributeReward",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "WithdrawStake",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "WithdrawReward",
                      "fields": [
                        {
                          "name": "nonce",
                          "type": 4,
                          "typeName": "T::Index"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 50,
                          "typeName": "T::SignedFixedPoint"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "ForceRefund",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "IncreaseNonce",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_nonce",
                          "type": 4,
                          "typeName": "T::Index"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 53,
            "type": {
              "path": [
                "security",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RecoverFromErrors",
                      "fields": [
                        {
                          "name": "new_status",
                          "type": 54,
                          "typeName": "StatusCode"
                        },
                        {
                          "name": "cleared_errors",
                          "type": 55,
                          "typeName": "Vec<ErrorCode>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "UpdateActiveBlock",
                      "fields": [
                        {
                          "name": "block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 54,
            "type": {
              "path": [
                "security",
                "types",
                "StatusCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Running",
                      "index": 0
                    },
                    {
                      "name": "Error",
                      "index": 1
                    },
                    {
                      "name": "Shutdown",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 55,
            "type": {
              "def": {
                "sequence": {
                  "type": 56
                }
              }
            }
          },
          {
            "id": 56,
            "type": {
              "path": [
                "security",
                "types",
                "ErrorCode"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "OracleOffline",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 57,
            "type": {
              "path": [
                "vault_registry",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RegisterVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "DepositCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "free_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "WithdrawCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "withdrawn_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "IncreaseLockedCollateral",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "delta",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "DecreaseLockedCollateral",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "delta",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "total",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "UpdatePublicKey",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "public_key",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "RegisterAddress",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "address",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "IncreaseToBeIssuedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "DecreaseToBeIssuedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "IssueTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "IncreaseToBeRedeemedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "DecreaseToBeRedeemedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "IncreaseToBeReplacedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "increase",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "DecreaseToBeReplacedTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "DecreaseTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "decrease",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "RedeemTokens",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "redeemed_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "RedeemTokensPremium",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "redeemed_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "user_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "RedeemTokensLiquidatedVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "RedeemTokensLiquidation",
                      "fields": [
                        {
                          "name": "redeemer_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "burned_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "transferred_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "ReplaceTokens",
                      "fields": [
                        {
                          "name": "old_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "additional_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "LiquidateVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "issued_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "to_be_issued_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "to_be_redeemed_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "to_be_replaced_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "backing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "status",
                          "type": 58,
                          "typeName": "VaultStatus"
                        },
                        {
                          "name": "replace_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "BanVault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "banned_until",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 21
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 58,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "VaultStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Active",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Liquidated",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 59,
            "type": {
              "def": {
                "primitive": "bool"
              }
            }
          },
          {
            "id": 60,
            "type": {
              "path": [
                "oracle",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AggregateUpdated",
                      "fields": [
                        {
                          "name": "values",
                          "type": 61,
                          "typeName": "Vec<(OracleKey, T::UnsignedFixedPoint)>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "OracleKeysUpdated",
                      "fields": [
                        {
                          "name": "oracle_keys",
                          "type": 65,
                          "typeName": "Vec<OracleKey>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "MaxDelayUpdated",
                      "fields": [
                        {
                          "name": "max_delay",
                          "type": 10,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 61,
            "type": {
              "def": {
                "sequence": {
                  "type": 62
                }
              }
            }
          },
          {
            "id": 62,
            "type": {
              "def": {
                "tuple": [
                  63,
                  64
                ]
              }
            }
          },
          {
            "id": 63,
            "type": {
              "path": [
                "spacewalk_primitives",
                "oracle",
                "Key"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ExchangeRate",
                      "fields": [
                        {
                          "type": 39,
                          "typeName": "CurrencyId"
                        }
                      ],
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 64,
            "type": {
              "path": [
                "sp_arithmetic",
                "fixed_point",
                "FixedU128"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 65,
            "type": {
              "def": {
                "sequence": {
                  "type": 63
                }
              }
            }
          },
          {
            "id": 66,
            "type": {
              "path": [
                "issue",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequestIssue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "requester",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "vault_stellar_public_key",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "IssueAmountChange",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "confiscated_griefing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecuteIssue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "requester",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "CancelIssue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "requester",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "IssuePeriodChange",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "RateLimitUpdate",
                      "fields": [
                        {
                          "name": "limit_volume_amount",
                          "type": 67,
                          "typeName": "Option<BalanceOf<T>>"
                        },
                        {
                          "name": "limit_volume_currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "interval_length",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "IssueMinimumTransferAmountUpdate",
                      "fields": [
                        {
                          "name": "new_minimum_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 67,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 6
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 6
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 68,
            "type": {
              "path": [
                "redeem",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequestRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "premium",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "stellar_address",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        },
                        {
                          "name": "transfer_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "LiquidationRedeem",
                      "fields": [
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "ExecuteRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "transfer_fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "CancelRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "redeemer",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "slashed_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "status",
                          "type": 69,
                          "typeName": "RedeemRequestStatus"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "MintTokensForReimbursedRedeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "RedeemPeriodChange",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "SelfRedeem",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "fee",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "RateLimitUpdate",
                      "fields": [
                        {
                          "name": "limit_volume_amount",
                          "type": 67,
                          "typeName": "Option<BalanceOf<T>>"
                        },
                        {
                          "name": "limit_volume_currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "interval_length",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "RedeemMinimumTransferAmountUpdate",
                      "fields": [
                        {
                          "name": "new_minimum_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 69,
            "type": {
              "path": [
                "spacewalk_primitives",
                "redeem",
                "RedeemRequestStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "index": 0
                    },
                    {
                      "name": "Completed",
                      "index": 1
                    },
                    {
                      "name": "Reimbursed",
                      "fields": [
                        {
                          "type": 59,
                          "typeName": "bool"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Retried",
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 70,
            "type": {
              "path": [
                "replace",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequestReplace",
                      "fields": [
                        {
                          "name": "old_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "WithdrawReplace",
                      "fields": [
                        {
                          "name": "old_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "withdrawn_tokens",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "withdrawn_griefing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AcceptReplace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "old_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "asset",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "stellar_address",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "ExecuteReplace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "old_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "CancelReplace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "new_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "old_vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "griefing_collateral",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "ReplacePeriodChange",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "ReplaceMinimumTransferAmountUpdate",
                      "fields": [
                        {
                          "name": "new_minimum_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 71,
            "type": {
              "path": [
                "nomination",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NominationOptIn",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "NominationOptOut",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "DepositCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "WithdrawCollateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "nominator_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 72,
            "type": {
              "path": [
                "dia_oracle",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "UpdatedPrices",
                      "fields": [
                        {
                          "type": 73,
                          "typeName": "Vec<((Vec<u8>, Vec<u8>), CoinInfo)>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Event is triggered when prices are updated"
                      ]
                    },
                    {
                      "name": "AccountIdAuthorized",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Event is triggered when account is authorized"
                      ]
                    },
                    {
                      "name": "AccountIdDeauthorized",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Event is triggered when account is deauthorized"
                      ]
                    },
                    {
                      "name": "CurrencyAdded",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Event is triggered when currency is added to the list"
                      ]
                    },
                    {
                      "name": "CurrencyRemoved",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Event is triggered when currency is remove from the list"
                      ]
                    },
                    {
                      "name": "BatchingApiRouteSet",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Event is triggered when batching api route is set from the list"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 73,
            "type": {
              "def": {
                "sequence": {
                  "type": 74
                }
              }
            }
          },
          {
            "id": 74,
            "type": {
              "def": {
                "tuple": [
                  75,
                  76
                ]
              }
            }
          },
          {
            "id": 75,
            "type": {
              "def": {
                "tuple": [
                  12,
                  12
                ]
              }
            }
          },
          {
            "id": 76,
            "type": {
              "path": [
                "dia_oracle",
                "dia",
                "CoinInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "symbol",
                      "type": 12,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "name",
                      "type": 12,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "blockchain",
                      "type": 12,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "supply",
                      "type": 6,
                      "typeName": "u128"
                    },
                    {
                      "name": "last_update_timestamp",
                      "type": 10,
                      "typeName": "u64"
                    },
                    {
                      "name": "price",
                      "type": 6,
                      "typeName": "u128"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 77,
            "type": {
              "path": [
                "clients_info",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NotifyClientRelease",
                      "fields": [
                        {
                          "name": "release",
                          "type": 78,
                          "typeName": "ClientRelease<UriOf<T>, T::Hash>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "ApplyClientRelease",
                      "fields": [
                        {
                          "name": "release",
                          "type": 78,
                          "typeName": "ClientRelease<UriOf<T>, T::Hash>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "AccountIdAuthorized",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "AccountIdDeauthorized",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 78,
            "type": {
              "path": [
                "clients_info",
                "ClientRelease"
              ],
              "params": [
                {
                  "name": "Uri",
                  "type": 79
                },
                {
                  "name": "Hash",
                  "type": 11
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "uri",
                      "type": 79,
                      "typeName": "Uri"
                    },
                    {
                      "name": "checksum",
                      "type": 11,
                      "typeName": "Hash"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 79,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 80,
            "type": {
              "path": [
                "reward_distribution",
                "pallet",
                "Event"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RewardPerBlockAdapted",
                      "fields": [
                        {
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "A new RewardPerBlock value has been set."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 81,
            "type": {
              "path": [
                "frame_system",
                "Phase"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ApplyExtrinsic",
                      "fields": [
                        {
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Finalization",
                      "index": 1
                    },
                    {
                      "name": "Initialization",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 82,
            "type": {
              "def": {
                "sequence": {
                  "type": 11
                }
              }
            }
          },
          {
            "id": 83,
            "type": {
              "def": {
                "sequence": {
                  "type": 84
                }
              }
            }
          },
          {
            "id": 84,
            "type": {
              "def": {
                "tuple": [
                  4,
                  4
                ]
              }
            }
          },
          {
            "id": 85,
            "type": {
              "path": [
                "frame_system",
                "LastRuntimeUpgradeInfo"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_version",
                      "type": 86,
                      "typeName": "codec::Compact<u32>"
                    },
                    {
                      "name": "spec_name",
                      "type": 87,
                      "typeName": "sp_runtime::RuntimeString"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 86,
            "type": {
              "def": {
                "compact": {
                  "type": 4
                }
              }
            }
          },
          {
            "id": 87,
            "type": {
              "def": {
                "primitive": "str"
              }
            }
          },
          {
            "id": 88,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "remark",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Make some on-chain remark.",
                        "",
                        "## Complexity",
                        "- `O(1)`"
                      ]
                    },
                    {
                      "name": "set_heap_pages",
                      "fields": [
                        {
                          "name": "pages",
                          "type": 10,
                          "typeName": "u64"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the number of pages in the WebAssembly environment's heap."
                      ]
                    },
                    {
                      "name": "set_code",
                      "fields": [
                        {
                          "name": "code",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Set the new runtime code.",
                        "",
                        "## Complexity",
                        "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"
                      ]
                    },
                    {
                      "name": "set_code_without_checks",
                      "fields": [
                        {
                          "name": "code",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the new runtime code without doing any checks of the given `code`.",
                        "",
                        "## Complexity",
                        "- `O(C)` where `C` length of `code`"
                      ]
                    },
                    {
                      "name": "set_storage",
                      "fields": [
                        {
                          "name": "items",
                          "type": 89,
                          "typeName": "Vec<KeyValue>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set some items of storage."
                      ]
                    },
                    {
                      "name": "kill_storage",
                      "fields": [
                        {
                          "name": "keys",
                          "type": 90,
                          "typeName": "Vec<Key>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Kill some items from storage."
                      ]
                    },
                    {
                      "name": "kill_prefix",
                      "fields": [
                        {
                          "name": "prefix",
                          "type": 12,
                          "typeName": "Key"
                        },
                        {
                          "name": "subkeys",
                          "type": 4,
                          "typeName": "u32"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Kill all storage items with a key that starts with the given prefix.",
                        "",
                        "**NOTE:** We rely on the Root origin to provide us the number of subkeys under",
                        "the prefix we are removing to accurately calculate the weight of this function."
                      ]
                    },
                    {
                      "name": "remark_with_event",
                      "fields": [
                        {
                          "name": "remark",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Make some on-chain remark and emit event."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 89,
            "type": {
              "def": {
                "sequence": {
                  "type": 75
                }
              }
            }
          },
          {
            "id": 90,
            "type": {
              "def": {
                "sequence": {
                  "type": 12
                }
              }
            }
          },
          {
            "id": 91,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockWeights"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_block",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "per_class",
                      "type": 92,
                      "typeName": "PerDispatchClass<WeightsPerClass>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 92,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 93
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 93,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 93,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 93,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 93,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "WeightsPerClass"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "base_extrinsic",
                      "type": 8,
                      "typeName": "Weight"
                    },
                    {
                      "name": "max_extrinsic",
                      "type": 94,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "max_total",
                      "type": 94,
                      "typeName": "Option<Weight>"
                    },
                    {
                      "name": "reserved",
                      "type": 94,
                      "typeName": "Option<Weight>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 94,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 8
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 8
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 95,
            "type": {
              "path": [
                "frame_system",
                "limits",
                "BlockLength"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "max",
                      "type": 96,
                      "typeName": "PerDispatchClass<u32>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 96,
            "type": {
              "path": [
                "frame_support",
                "dispatch",
                "PerDispatchClass"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "normal",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "operational",
                      "type": 4,
                      "typeName": "T"
                    },
                    {
                      "name": "mandatory",
                      "type": 4,
                      "typeName": "T"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 97,
            "type": {
              "path": [
                "sp_weights",
                "RuntimeDbWeight"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "read",
                      "type": 10,
                      "typeName": "u64"
                    },
                    {
                      "name": "write",
                      "type": 10,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 98,
            "type": {
              "path": [
                "sp_version",
                "RuntimeVersion"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "spec_name",
                      "type": 87,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "impl_name",
                      "type": 87,
                      "typeName": "RuntimeString"
                    },
                    {
                      "name": "authoring_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "spec_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "impl_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "apis",
                      "type": 99,
                      "typeName": "ApisVec"
                    },
                    {
                      "name": "transaction_version",
                      "type": 4,
                      "typeName": "u32"
                    },
                    {
                      "name": "state_version",
                      "type": 2,
                      "typeName": "u8"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 99,
            "type": {
              "path": [
                "Cow"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 100
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 100
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 100,
            "type": {
              "def": {
                "sequence": {
                  "type": 101
                }
              }
            }
          },
          {
            "id": 101,
            "type": {
              "def": {
                "tuple": [
                  43,
                  4
                ]
              }
            }
          },
          {
            "id": 102,
            "type": {
              "def": {
                "primitive": "u16"
              }
            }
          },
          {
            "id": 103,
            "type": {
              "path": [
                "frame_system",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidSpecName",
                      "index": 0,
                      "docs": [
                        "The name of specification does not match between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "SpecVersionNeedsToIncrease",
                      "index": 1,
                      "docs": [
                        "The specification version is not allowed to decrease between the current runtime",
                        "and the new runtime."
                      ]
                    },
                    {
                      "name": "FailedToExtractRuntimeVersion",
                      "index": 2,
                      "docs": [
                        "Failed to extract the runtime version from the new runtime.",
                        "",
                        "Either calling `Core_version` or decoding `RuntimeVersion` failed."
                      ]
                    },
                    {
                      "name": "NonDefaultComposite",
                      "index": 3,
                      "docs": [
                        "Suicide called when the account has non-default composite data."
                      ]
                    },
                    {
                      "name": "NonZeroRefCount",
                      "index": 4,
                      "docs": [
                        "There is a non-zero reference count preventing the account from being purged."
                      ]
                    },
                    {
                      "name": "CallFiltered",
                      "index": 5,
                      "docs": [
                        "The origin filter prevent the call to be dispatched."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the System pallet"
              ]
            }
          },
          {
            "id": 104,
            "type": {
              "path": [
                "pallet_timestamp",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set",
                      "fields": [
                        {
                          "name": "now",
                          "type": 9,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the current time.",
                        "",
                        "This call should be invoked exactly once per block. It will panic at the finalization",
                        "phase, if this call hasn't been invoked by that time.",
                        "",
                        "The timestamp should be greater than the previous one by the amount specified by",
                        "`MinimumPeriod`.",
                        "",
                        "The dispatch origin for this call must be `Inherent`.",
                        "",
                        "## Complexity",
                        "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)",
                        "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in",
                        "  `on_finalize`)",
                        "- 1 event handler `on_timestamp_set`. Must be `O(1)`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 105,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredState"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Live",
                      "index": 0
                    },
                    {
                      "name": "PendingPause",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Paused",
                      "index": 2
                    },
                    {
                      "name": "PendingResume",
                      "fields": [
                        {
                          "name": "scheduled_at",
                          "type": 4,
                          "typeName": "N"
                        },
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "N"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 106,
            "type": {
              "path": [
                "pallet_grandpa",
                "StoredPendingChange"
              ],
              "params": [
                {
                  "name": "N",
                  "type": 4
                },
                {
                  "name": "Limit",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "scheduled_at",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "delay",
                      "type": 4,
                      "typeName": "N"
                    },
                    {
                      "name": "next_authorities",
                      "type": 107,
                      "typeName": "BoundedAuthorityList<Limit>"
                    },
                    {
                      "name": "forced",
                      "type": 108,
                      "typeName": "Option<N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 107,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 31
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 30,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 108,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 4
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 109,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "report_equivocation",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 110,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 121,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported."
                      ]
                    },
                    {
                      "name": "report_equivocation_unsigned",
                      "fields": [
                        {
                          "name": "equivocation_proof",
                          "type": 110,
                          "typeName": "Box<EquivocationProof<T::Hash, T::BlockNumber>>"
                        },
                        {
                          "name": "key_owner_proof",
                          "type": 121,
                          "typeName": "T::KeyOwnerProof"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Report voter equivocation/misbehavior. This method will verify the",
                        "equivocation proof and validate the given key ownership proof",
                        "against the extracted offender. If both are valid, the offence",
                        "will be reported.",
                        "",
                        "This extrinsic must be called unsigned and it is expected that only",
                        "block authors will call it (validated in `ValidateUnsigned`), as such",
                        "if the block author is defined it will be defined as the equivocation",
                        "reporter."
                      ]
                    },
                    {
                      "name": "note_stalled",
                      "fields": [
                        {
                          "name": "delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        },
                        {
                          "name": "best_finalized_block_number",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Note that the current authority set of the GRANDPA finality gadget has stalled.",
                        "",
                        "This will trigger a forced authority set change at the beginning of the next session, to",
                        "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume",
                        "that the block signalling the forced change will not be re-orged e.g. 1000 blocks.",
                        "The block production rate (which may be slowed down because of finality lagging) should",
                        "be taken into account when choosing the `delay`. The GRANDPA voters based on the new",
                        "authority will start voting on top of `best_finalized_block_number` for new finalized",
                        "blocks. `best_finalized_block_number` should be the highest of the latest finalized",
                        "block of all validators of the new authority set.",
                        "",
                        "Only callable by root."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 110,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "EquivocationProof"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "set_id",
                      "type": 10,
                      "typeName": "SetId"
                    },
                    {
                      "name": "equivocation",
                      "type": 111,
                      "typeName": "Equivocation<H, N>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 111,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Prevote",
                      "fields": [
                        {
                          "type": 112,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Prevote<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Precommit",
                      "fields": [
                        {
                          "type": 118,
                          "typeName": "grandpa::Equivocation<AuthorityId, grandpa::Precommit<H, N>,\nAuthoritySignature>"
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 112,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 32
                },
                {
                  "name": "V",
                  "type": 113
                },
                {
                  "name": "S",
                  "type": 114
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 10,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 32,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 117,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 117,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 113,
            "type": {
              "path": [
                "finality_grandpa",
                "Prevote"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 11,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 114,
            "type": {
              "path": [
                "sp_consensus_grandpa",
                "app",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 115,
                      "typeName": "ed25519::Signature"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 115,
            "type": {
              "path": [
                "sp_core",
                "ed25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 116,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 116,
            "type": {
              "def": {
                "array": {
                  "len": 64,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 117,
            "type": {
              "def": {
                "tuple": [
                  113,
                  114
                ]
              }
            }
          },
          {
            "id": 118,
            "type": {
              "path": [
                "finality_grandpa",
                "Equivocation"
              ],
              "params": [
                {
                  "name": "Id",
                  "type": 32
                },
                {
                  "name": "V",
                  "type": 119
                },
                {
                  "name": "S",
                  "type": 114
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "round_number",
                      "type": 10,
                      "typeName": "u64"
                    },
                    {
                      "name": "identity",
                      "type": 32,
                      "typeName": "Id"
                    },
                    {
                      "name": "first",
                      "type": 120,
                      "typeName": "(V, S)"
                    },
                    {
                      "name": "second",
                      "type": 120,
                      "typeName": "(V, S)"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 119,
            "type": {
              "path": [
                "finality_grandpa",
                "Precommit"
              ],
              "params": [
                {
                  "name": "H",
                  "type": 11
                },
                {
                  "name": "N",
                  "type": 4
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "target_hash",
                      "type": 11,
                      "typeName": "H"
                    },
                    {
                      "name": "target_number",
                      "type": 4,
                      "typeName": "N"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 120,
            "type": {
              "def": {
                "tuple": [
                  119,
                  114
                ]
              }
            }
          },
          {
            "id": 121,
            "type": {
              "path": [
                "sp_core",
                "Void"
              ],
              "def": {
                "variant": {}
              }
            }
          },
          {
            "id": 122,
            "type": {
              "path": [
                "pallet_grandpa",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "PauseFailed",
                      "index": 0,
                      "docs": [
                        "Attempt to signal GRANDPA pause when the authority set isn't live",
                        "(either paused or already pending pause)."
                      ]
                    },
                    {
                      "name": "ResumeFailed",
                      "index": 1,
                      "docs": [
                        "Attempt to signal GRANDPA resume when the authority set isn't paused",
                        "(either live or already pending resume)."
                      ]
                    },
                    {
                      "name": "ChangePending",
                      "index": 2,
                      "docs": [
                        "Attempt to signal GRANDPA change with one already pending."
                      ]
                    },
                    {
                      "name": "TooSoon",
                      "index": 3,
                      "docs": [
                        "Cannot signal forced change so soon after last."
                      ]
                    },
                    {
                      "name": "InvalidKeyOwnershipProof",
                      "index": 4,
                      "docs": [
                        "A key ownership proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "InvalidEquivocationProof",
                      "index": 5,
                      "docs": [
                        "An equivocation proof provided as part of an equivocation report is invalid."
                      ]
                    },
                    {
                      "name": "DuplicateOffenceReport",
                      "index": 6,
                      "docs": [
                        "A given equivocation report is valid but already previously reported."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 123,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "sudo",
                      "fields": [
                        {
                          "name": "call",
                          "type": 124,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "sudo_unchecked_weight",
                      "fields": [
                        {
                          "name": "call",
                          "type": 124,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        },
                        {
                          "name": "weight",
                          "type": 8,
                          "typeName": "Weight"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Root` origin.",
                        "This function does not check the weight of the call, and instead allows the",
                        "Sudo user to specify the weight of the call.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "set_key",
                      "fields": [
                        {
                          "name": "new",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo",
                        "key.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    },
                    {
                      "name": "sudo_as",
                      "fields": [
                        {
                          "name": "who",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "call",
                          "type": 124,
                          "typeName": "Box<<T as Config>::RuntimeCall>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Authenticates the sudo key and dispatches a function call with `Signed` origin from",
                        "a given account.",
                        "",
                        "The dispatch origin for this call must be _Signed_.",
                        "",
                        "## Complexity",
                        "- O(1)."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 124,
            "type": {
              "path": [
                "spacewalk_runtime_standalone",
                "RuntimeCall"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "System",
                      "fields": [
                        {
                          "type": 88,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<System, Runtime>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Timestamp",
                      "fields": [
                        {
                          "type": 104,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Timestamp, Runtime>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Grandpa",
                      "fields": [
                        {
                          "type": 109,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Grandpa, Runtime>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Sudo",
                      "fields": [
                        {
                          "type": 123,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Sudo, Runtime>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Tokens",
                      "fields": [
                        {
                          "type": 125,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Tokens, Runtime>"
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Currencies",
                      "fields": [
                        {
                          "type": 130,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Currencies, Runtime>"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Balances",
                      "fields": [
                        {
                          "type": 131,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Balances, Runtime>"
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "StellarRelay",
                      "fields": [
                        {
                          "type": 132,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<StellarRelay, Runtime>"
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Security",
                      "fields": [
                        {
                          "type": 138,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Security, Runtime>"
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "VaultRegistry",
                      "fields": [
                        {
                          "type": 139,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<VaultRegistry, Runtime>"
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Oracle",
                      "fields": [
                        {
                          "type": 141,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Oracle, Runtime>"
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Issue",
                      "fields": [
                        {
                          "type": 142,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Issue, Runtime>"
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Redeem",
                      "fields": [
                        {
                          "type": 143,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Redeem, Runtime>"
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Replace",
                      "fields": [
                        {
                          "type": 144,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Replace, Runtime>"
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Fee",
                      "fields": [
                        {
                          "type": 145,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Fee, Runtime>"
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Nomination",
                      "fields": [
                        {
                          "type": 146,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<Nomination, Runtime>"
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "DiaOracleModule",
                      "fields": [
                        {
                          "type": 147,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<DiaOracleModule, Runtime>"
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "ClientsInfo",
                      "fields": [
                        {
                          "type": 148,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<ClientsInfo, Runtime>"
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "RewardDistribution",
                      "fields": [
                        {
                          "type": 149,
                          "typeName": "self::sp_api_hidden_includes_construct_runtime::hidden_include::dispatch\n::CallableCallFor<RewardDistribution, Runtime>"
                        }
                      ],
                      "index": 31
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 125,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "It will decrease the total issuance of the system by the",
                        "`TransferFee`. If the sender's account is below the existential",
                        "deposit as a result of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "keep_alive",
                          "type": 59,
                          "typeName": "bool"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer all remaining balance to the given account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_",
                        "balances. This means that any locked, reserved, or existential",
                        "deposits (when `keep_alive` is `true`), will not be transferred by",
                        "this function. To ensure that this function results in a killed",
                        "account, you might need to prepare the account by removing any",
                        "reference counters, storage deposits, etc...",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all`",
                        "  operation should send all of the funds the account has, causing",
                        "  the sender account to be killed (false), or transfer everything",
                        "  except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true)."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer",
                        "will not kill the origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source",
                        "account may be specified.",
                        "",
                        "The dispatch origin for this call must be _Root_.",
                        "",
                        "- `source`: The sender of the transfer.",
                        "- `dest`: The recipient of the transfer.",
                        "- `currency_id`: currency type.",
                        "- `amount`: free balance amount to tranfer."
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "new_free",
                          "type": 129,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it",
                        "will also decrease the total issuance of the system",
                        "(`TotalIssuance`). If the new free or reserved balance is below the",
                        "existential deposit, it will reap the `AccountInfo`.",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 126,
            "type": {
              "path": [
                "sp_runtime",
                "multiaddress",
                "MultiAddress"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "AccountIndex",
                  "type": 36
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Id",
                      "fields": [
                        {
                          "type": 0,
                          "typeName": "AccountId"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Index",
                      "fields": [
                        {
                          "type": 127,
                          "typeName": "AccountIndex"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Raw",
                      "fields": [
                        {
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Address32",
                      "fields": [
                        {
                          "type": 1,
                          "typeName": "[u8; 32]"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Address20",
                      "fields": [
                        {
                          "type": 128,
                          "typeName": "[u8; 20]"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 127,
            "type": {
              "def": {
                "compact": {
                  "type": 36
                }
              }
            }
          },
          {
            "id": 128,
            "type": {
              "def": {
                "array": {
                  "len": 20,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 129,
            "type": {
              "def": {
                "compact": {
                  "type": 6
                }
              }
            }
          },
          {
            "id": 130,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some balance to another account under `currency_id`.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "transfer_native_currency",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Transfer some native currency to another account.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the",
                        "transactor."
                      ]
                    },
                    {
                      "name": "update_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 126,
                          "typeName": "<T::Lookup as StaticLookup>::Source"
                        },
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "CurrencyIdOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 51,
                          "typeName": "AmountOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "update amount of account `who` under `currency_id`.",
                        "",
                        "The dispatch origin of this call must be _Root_."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 131,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "transfer",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Transfer some liquid free balance to another account.",
                        "",
                        "`transfer` will set the `FreeBalance` of the sender and receiver.",
                        "If the sender's account is below the existential deposit as a result",
                        "of the transfer, the account will be reaped.",
                        "",
                        "The dispatch origin for this call must be `Signed` by the transactor.",
                        "",
                        "## Complexity",
                        "- Dependent on arguments but not critical, given proper implementations for input config",
                        "  types. See related functions below.",
                        "- It contains a limited number of reads and writes internally and no complex",
                        "  computation.",
                        "",
                        "Related functions:",
                        "",
                        "  - `ensure_can_withdraw` is always called internally but has a bounded complexity.",
                        "  - Transferring balances to accounts that did not exist before will cause",
                        "    `T::OnNewAccount::on_new_account` to be called.",
                        "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`.",
                        "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check",
                        "    that the transfer will not kill the origin account."
                      ]
                    },
                    {
                      "name": "set_balance",
                      "fields": [
                        {
                          "name": "who",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "new_free",
                          "type": 129,
                          "typeName": "T::Balance"
                        },
                        {
                          "name": "new_reserved",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Set the balances of a given account.",
                        "",
                        "This will alter `FreeBalance` and `ReservedBalance` in storage. it will",
                        "also alter the total issuance of the system (`TotalIssuance`) appropriately.",
                        "If the new free or reserved balance is below the existential deposit,",
                        "it will reset the account nonce (`frame_system::AccountNonce`).",
                        "",
                        "The dispatch origin for this call is `root`."
                      ]
                    },
                    {
                      "name": "force_transfer",
                      "fields": [
                        {
                          "name": "source",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Exactly as `transfer`, except the origin must be root and the source account may be",
                        "specified.",
                        "## Complexity",
                        "- Same as transfer, but additional read and write because the source account is not",
                        "  assumed to be in the overlay."
                      ]
                    },
                    {
                      "name": "transfer_keep_alive",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "value",
                          "type": 129,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Same as the [`transfer`] call, but with a check that the transfer will not kill the",
                        "origin account.",
                        "",
                        "99% of the time you want [`transfer`] instead.",
                        "",
                        "[`transfer`]: struct.Pallet.html#method.transfer"
                      ]
                    },
                    {
                      "name": "transfer_all",
                      "fields": [
                        {
                          "name": "dest",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "keep_alive",
                          "type": 59,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Transfer the entire transferable balance from the caller account.",
                        "",
                        "NOTE: This function only attempts to transfer _transferable_ balances. This means that",
                        "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be",
                        "transferred by this function. To ensure that this function results in a killed account,",
                        "you might need to prepare the account by removing any reference counters, storage",
                        "deposits, etc...",
                        "",
                        "The dispatch origin of this call must be Signed.",
                        "",
                        "- `dest`: The recipient of the transfer.",
                        "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all",
                        "  of the funds the account has, causing the sender account to be killed (false), or",
                        "  transfer everything except at least the existential deposit, which will guarantee to",
                        "  keep the sender account alive (true). ## Complexity",
                        "- O(1). Just like transfer, but reading the user's transferable balance first."
                      ]
                    },
                    {
                      "name": "force_unreserve",
                      "fields": [
                        {
                          "name": "who",
                          "type": 126,
                          "typeName": "AccountIdLookupOf<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "T::Balance"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Unreserve some balance from a user by force.",
                        "",
                        "Can only be called by ROOT."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 132,
            "type": {
              "path": [
                "stellar_relay",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "update_tier_1_validator_set",
                      "fields": [
                        {
                          "name": "validators",
                          "type": 133,
                          "typeName": "Vec<ValidatorOf<T>>"
                        },
                        {
                          "name": "organizations",
                          "type": 136,
                          "typeName": "Vec<OrganizationOf<T>>"
                        },
                        {
                          "name": "enactment_block_height",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "This extrinsic is used to update the current sets of validators and",
                        "organizations. The current values of validators and organizations are moved to the",
                        "OldValidators and OldOrganizations respectively, and the function arguments are stored",
                        "as new/current values. The `enactment_block_height` parameter is used by the",
                        "`validate_stellar_transaction` function to determine if it should use the 'old' or",
                        "updated sets for validation. This makes a seamless transition between old and new",
                        "validators possible.",
                        "",
                        "It can only be called by the root origin."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 133,
            "type": {
              "def": {
                "sequence": {
                  "type": 134
                }
              }
            }
          },
          {
            "id": 134,
            "type": {
              "path": [
                "stellar_relay",
                "traits",
                "Validator"
              ],
              "params": [
                {
                  "name": "OrganizationId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "name",
                      "type": 135,
                      "typeName": "BoundedVec<u8, FieldLength>"
                    },
                    {
                      "name": "public_key",
                      "type": 135,
                      "typeName": "BoundedVec<u8, FieldLength>"
                    },
                    {
                      "name": "organization_id",
                      "type": 6,
                      "typeName": "OrganizationId"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 135,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 2
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 136,
            "type": {
              "def": {
                "sequence": {
                  "type": 137
                }
              }
            }
          },
          {
            "id": 137,
            "type": {
              "path": [
                "stellar_relay",
                "traits",
                "Organization"
              ],
              "params": [
                {
                  "name": "OrganizationId",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 6,
                      "typeName": "OrganizationId"
                    },
                    {
                      "name": "name",
                      "type": 135,
                      "typeName": "BoundedVec<u8, FieldLength>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 138,
            "type": {
              "path": [
                "security",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_parachain_status",
                      "fields": [
                        {
                          "name": "status_code",
                          "type": 54,
                          "typeName": "StatusCode"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Set the parachain status code.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `status_code` - the status code to set",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "insert_parachain_error",
                      "fields": [
                        {
                          "name": "error_code",
                          "type": 56,
                          "typeName": "ErrorCode"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Insert a new parachain error.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `error_code` - the error code to insert",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "remove_parachain_error",
                      "fields": [
                        {
                          "name": "error_code",
                          "type": 56,
                          "typeName": "ErrorCode"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Remove a parachain error.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `error_code` - the error code to remove",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 139,
            "type": {
              "path": [
                "vault_registry",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "register_vault",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Initiates the registration procedure for a new Vault.",
                        "The Vault locks up collateral, which is to be used in the issuing process.",
                        "",
                        "",
                        "# Errors",
                        "* `InsufficientVaultCollateralAmount` - if the collateral is below the minimum threshold",
                        "* `VaultAlreadyRegistered` - if a vault is already registered for the origin account",
                        "* `InsufficientCollateralAvailable` - if the vault does not own enough collateral"
                      ]
                    },
                    {
                      "name": "deposit_collateral",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Deposit collateral as a security against stealing the",
                        "Stellar assets locked with the caller.",
                        "",
                        "# Arguments",
                        "* `amount` - the amount of extra collateral to lock"
                      ]
                    },
                    {
                      "name": "withdraw_collateral",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Withdraws `amount` of the collateral from the amount locked by",
                        "the vault corresponding to the origin account",
                        "The collateral left after withdrawal must be more",
                        "(free or used in collateral issued tokens) than MinimumCollateralVault",
                        "and above the SecureCollateralThreshold. Collateral that is currently",
                        "being used to back issued tokens remains locked until the Vault",
                        "is used for a redeem request (full release can take multiple redeem requests).",
                        "",
                        "# Arguments",
                        "* `amount` - the amount of collateral to withdraw",
                        "",
                        "# Errors",
                        "* `VaultNotFound` - if no vault exists for the origin account",
                        "* `InsufficientCollateralAvailable` - if the vault does not own enough collateral"
                      ]
                    },
                    {
                      "name": "register_public_key",
                      "fields": [
                        {
                          "name": "public_key",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Registers a new Stellar address for the vault.",
                        "",
                        "# Arguments",
                        "* `public_key` - the Stellar public key of the vault to update"
                      ]
                    },
                    {
                      "name": "accept_new_issues",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "accept_new_issues",
                          "type": 59,
                          "typeName": "bool"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Configures whether or not the vault accepts new issues.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction (i.e. the vault)",
                        "* `accept_new_issues` - true indicates that the vault accepts new issues",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "set_custom_secure_threshold",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "custom_threshold",
                          "type": 140,
                          "typeName": "Option<UnsignedFixedPoint<T>>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Configures a custom, higher secure collateral threshold for the vault.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction (i.e. the vault)",
                        "* `custom_threshold` - either the threshold, or None to use the systemwide default",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "report_undercollateralized_vault",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "set_minimum_collateral",
                      "fields": [
                        {
                          "name": "currency_id",
                          "type": 39,
                          "typeName": "CurrencyId<T>"
                        },
                        {
                          "name": "minimum",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 7,
                      "docs": [
                        "Changes the minimum amount of collateral required for registration",
                        "(only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `currency_id` - the collateral's currency id",
                        "* `minimum` - the new minimum collateral"
                      ]
                    },
                    {
                      "name": "set_system_collateral_ceiling",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "ceiling",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8,
                      "docs": [
                        "Changes the collateral ceiling for a currency (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change",
                        "* `ceiling` - the new collateral ceiling"
                      ]
                    },
                    {
                      "name": "set_secure_collateral_threshold",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "threshold",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 9,
                      "docs": [
                        "Changes the secure threshold for a currency (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change",
                        "* `threshold` - the new secure threshold"
                      ]
                    },
                    {
                      "name": "set_premium_redeem_threshold",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "threshold",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 10,
                      "docs": [
                        "Changes the collateral premium redeem threshold for a currency (only executable by the",
                        "Root account)",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change",
                        "* `ceiling` - the new collateral ceiling"
                      ]
                    },
                    {
                      "name": "set_liquidation_collateral_threshold",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "threshold",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 11,
                      "docs": [
                        "Changes the collateral liquidation threshold for a currency (only executable by the Root",
                        "account)",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change",
                        "* `ceiling` - the new collateral ceiling"
                      ]
                    },
                    {
                      "name": "recover_vault_id",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        }
                      ],
                      "index": 12,
                      "docs": [
                        "Recover vault ID from a liquidated status.",
                        "",
                        "# Arguments",
                        "* `currency_pair` - the currency pair to change"
                      ]
                    },
                    {
                      "name": "set_punishment_delay",
                      "fields": [
                        {
                          "name": "punishment_delay",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 13
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 140,
            "type": {
              "path": [
                "Option"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 64
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "None",
                      "index": 0
                    },
                    {
                      "name": "Some",
                      "fields": [
                        {
                          "type": 64
                        }
                      ],
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 141,
            "type": {
              "path": [
                "oracle",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "update_oracle_keys",
                      "fields": [
                        {
                          "name": "oracle_keys",
                          "type": 65,
                          "typeName": "Vec<OracleKey>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "set oracle keys",
                        "",
                        "# Arguments",
                        "* `oracle_key` - list of oracle keys"
                      ]
                    },
                    {
                      "name": "set_max_delay",
                      "fields": [
                        {
                          "name": "new_max_delay",
                          "type": 10,
                          "typeName": "T::Moment"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the maximum delay (in milliseconds) for a reported value to be used",
                        "",
                        "# Arguments",
                        "* `new_max_delay` - new max delay in milliseconds"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 142,
            "type": {
              "path": [
                "issue",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_issue",
                      "fields": [
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Request the issuance of tokens",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `amount` - amount of a stellar asset the user wants to convert to issued tokens. Note",
                        "  that the",
                        "amount of issued tokens received will be less, because a fee is subtracted.",
                        "* `asset` - the currency id of the stellar asset the user wants to convert to issued",
                        "  tokens",
                        "* `vault` - address of the vault"
                      ]
                    },
                    {
                      "name": "execute_issue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "transaction_envelope_xdr_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "externalized_envelopes_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "transaction_set_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Finalize the issuance of tokens",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `issue_id` - identifier of issue request as output from request_issue",
                        "* `transaction_envelope_xdr_encoded` - the XDR representation of the transaction",
                        "  envelope",
                        "* `externalized_envelopes_encoded` - the XDR representation of the externalized",
                        "  envelopes",
                        "* `transaction_set_encoded` - the XDR representation of the transaction set"
                      ]
                    },
                    {
                      "name": "cancel_issue",
                      "fields": [
                        {
                          "name": "issue_id",
                          "type": 11,
                          "typeName": "H256"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Cancel the issuance of tokens if expired",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `issue_id` - identifier of issue request as output from request_issue"
                      ]
                    },
                    {
                      "name": "set_issue_period",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Set the default issue period for tx verification.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `period` - default period for new requests"
                      ]
                    },
                    {
                      "name": "rate_limit_update",
                      "fields": [
                        {
                          "name": "limit_volume_amount",
                          "type": 67,
                          "typeName": "Option<BalanceOf<T>>"
                        },
                        {
                          "name": "limit_volume_currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "interval_length",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "minimum_transfer_amount_update",
                      "fields": [
                        {
                          "name": "new_minimum_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 143,
            "type": {
              "path": [
                "redeem",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_redeem",
                      "fields": [
                        {
                          "name": "amount_wrapped",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "stellar_address",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        },
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Initializes a request to burn issued tokens against a Vault with sufficient tokens. It",
                        "will also ensure that the Parachain status is RUNNING.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `amount_wrapped` - amount of tokens to redeem",
                        "* `asset` - the asset to redeem",
                        "* `stellar_address` - the address to receive assets on Stellar",
                        "* `vault_id` - address of the vault"
                      ]
                    },
                    {
                      "name": "liquidation_redeem",
                      "fields": [
                        {
                          "name": "currencies",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount_wrapped",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "When a Vault is liquidated, its collateral is slashed up to 150% of the liquidated",
                        "value. To re-establish the physical 1:1 peg, the bridge allows users to burn issued",
                        "tokens in return for collateral at a premium rate.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `collateral_currency` - currency to be received",
                        "* `wrapped_currency` - currency of the wrapped token to burn",
                        "* `amount_wrapped` - amount of issued tokens to burn"
                      ]
                    },
                    {
                      "name": "execute_redeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "transaction_envelope_xdr_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "externalized_envelopes_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "transaction_set_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "A Vault calls this function after receiving an RequestRedeem event with their public",
                        "key. Before calling the function, the Vault transfers the specific amount of Stellar",
                        "assets to the Stellar address given in the original redeem request. The Vault completes",
                        "the redeem with this function.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - anyone executing this redeem request",
                        "* `redeem_id` - identifier of redeem request as output from request_redeem",
                        "* `transaction_envelope_xdr_encoded` - the XDR representation of the transaction",
                        "  envelope",
                        "* `externalized_envelopes_encoded` - the XDR representation of the externalized",
                        "  envelopes",
                        "* `transaction_set_encoded` - the XDR representation of the transaction set"
                      ]
                    },
                    {
                      "name": "cancel_redeem",
                      "fields": [
                        {
                          "name": "redeem_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "reimburse",
                          "type": 59,
                          "typeName": "bool"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "If a redeem request is not completed on time, the redeem request can be cancelled.",
                        "The user that initially requested the redeem process calls this function to obtain",
                        "the Vault’s collateral as compensation for not transferring the Stellar assets back to",
                        "their address.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `redeem_id` - identifier of redeem request as output from request_redeem",
                        "* `reimburse` - specifying if the user wishes to be reimbursed in collateral",
                        "and slash the Vault, or wishes to keep the tokens (and retry",
                        "Redeem with another Vault)"
                      ]
                    },
                    {
                      "name": "set_redeem_period",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Set the default redeem period for tx verification.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `period` - default period for new requests"
                      ]
                    },
                    {
                      "name": "mint_tokens_for_reimbursed_redeem",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "redeem_id",
                          "type": 11,
                          "typeName": "H256"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Mint tokens for a redeem that was cancelled with reimburse=true. This is",
                        "only possible if at the time of the cancel_redeem, the vault did not have",
                        "sufficient collateral after being slashed to back the tokens that the user",
                        "used to hold.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `redeem_id` - identifier of redeem request as output from request_redeem"
                      ]
                    },
                    {
                      "name": "self_redeem",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount_wrapped",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "rate_limit_update",
                      "fields": [
                        {
                          "name": "limit_volume_amount",
                          "type": 67,
                          "typeName": "Option<BalanceOf<T>>"
                        },
                        {
                          "name": "limit_volume_currency_id",
                          "type": 39,
                          "typeName": "T::CurrencyId"
                        },
                        {
                          "name": "interval_length",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "minimum_transfer_amount_update",
                      "fields": [
                        {
                          "name": "new_minimum_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 8
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 144,
            "type": {
              "path": [
                "replace",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "request_replace",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Request the replacement of a new vault ownership",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction",
                        "* `amount` - amount of issued tokens"
                      ]
                    },
                    {
                      "name": "withdraw_replace",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Withdraw a request of vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction: the old vault",
                        "* `amount` - amount of tokens to be withdrawn from being replaced"
                      ]
                    },
                    {
                      "name": "accept_replace",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        },
                        {
                          "name": "old_vault",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "collateral",
                          "type": 129,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "stellar_address",
                          "type": 1,
                          "typeName": "StellarPublicKeyRaw"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Accept request of vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the initiator of the transaction: the new vault",
                        "* `currency_pair` - currency_pair of the new vault",
                        "* `amount` - amount of tokens to be replaced",
                        "* `collateral` - the collateral provided by the new vault to match the replace request",
                        "  (for backing the transferred tokens)",
                        "* `stellar_address` - the address that old-vault should transfer the wrapped asset to"
                      ]
                    },
                    {
                      "name": "execute_replace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 11,
                          "typeName": "H256"
                        },
                        {
                          "name": "transaction_envelope_xdr_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "externalized_envelopes_xdr_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "transaction_set_xdr_encoded",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Execute vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction: the new vault",
                        "* `replace_id` - the ID of the replacement request"
                      ]
                    },
                    {
                      "name": "cancel_replace",
                      "fields": [
                        {
                          "name": "replace_id",
                          "type": 11,
                          "typeName": "H256"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Cancel vault replacement",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - sender of the transaction: anyone",
                        "* `replace_id` - the ID of the replacement request"
                      ]
                    },
                    {
                      "name": "set_replace_period",
                      "fields": [
                        {
                          "name": "period",
                          "type": 4,
                          "typeName": "T::BlockNumber"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Set the default replace period for tx verification.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - the dispatch origin of this call (must be _Root_)",
                        "* `period` - default period for new requests",
                        "",
                        "# Weight: `O(1)`"
                      ]
                    },
                    {
                      "name": "minimum_transfer_amount_update",
                      "fields": [
                        {
                          "name": "new_minimum_amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 6
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 145,
            "type": {
              "path": [
                "fee",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "withdraw_rewards",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "index",
                          "type": 108,
                          "typeName": "Option<T::Index>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Withdraw all rewards from the `origin` account in the `vault_id` staking pool.",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account"
                      ]
                    },
                    {
                      "name": "set_issue_fee",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Changes the issue fee percentage (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account",
                        "* `fee` - the new fee"
                      ]
                    },
                    {
                      "name": "set_issue_griefing_collateral",
                      "fields": [
                        {
                          "name": "griefing_collateral",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Changes the issue griefing collateral percentage (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account",
                        "* `griefing_collateral` - the new griefing collateral"
                      ]
                    },
                    {
                      "name": "set_redeem_fee",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 3,
                      "docs": [
                        "Changes the redeem fee percentage (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account",
                        "* `fee` - the new fee"
                      ]
                    },
                    {
                      "name": "set_premium_redeem_fee",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 4,
                      "docs": [
                        "Changes the premium redeem fee percentage (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account",
                        "* `fee` - the new fee"
                      ]
                    },
                    {
                      "name": "set_punishment_fee",
                      "fields": [
                        {
                          "name": "fee",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 5,
                      "docs": [
                        "Changes the punishment fee percentage (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account",
                        "* `fee` - the new fee"
                      ]
                    },
                    {
                      "name": "set_replace_griefing_collateral",
                      "fields": [
                        {
                          "name": "griefing_collateral",
                          "type": 64,
                          "typeName": "UnsignedFixedPoint<T>"
                        }
                      ],
                      "index": 6,
                      "docs": [
                        "Changes the replace griefing collateral percentage (only executable by the Root account)",
                        "",
                        "# Arguments",
                        "",
                        "* `origin` - signing account",
                        "* `griefing_collateral` - the new griefing collateral"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 146,
            "type": {
              "path": [
                "nomination",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_nomination_enabled",
                      "fields": [
                        {
                          "name": "enabled",
                          "type": 59,
                          "typeName": "bool"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "opt_in_to_nomination",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Allow nomination for this vault"
                      ]
                    },
                    {
                      "name": "opt_out_of_nomination",
                      "fields": [
                        {
                          "name": "currency_pair",
                          "type": 49,
                          "typeName": "DefaultVaultCurrencyPair<T>"
                        }
                      ],
                      "index": 2,
                      "docs": [
                        "Disallow nomination for this vault"
                      ]
                    },
                    {
                      "name": "deposit_collateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "withdraw_collateral",
                      "fields": [
                        {
                          "name": "vault_id",
                          "type": 48,
                          "typeName": "DefaultVaultId<T>"
                        },
                        {
                          "name": "amount",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        },
                        {
                          "name": "index",
                          "type": 108,
                          "typeName": "Option<T::Index>"
                        }
                      ],
                      "index": 4
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 147,
            "type": {
              "path": [
                "dia_oracle",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "add_currency",
                      "fields": [
                        {
                          "name": "blockchain",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "remove_currency",
                      "fields": [
                        {
                          "name": "blockchain",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        },
                        {
                          "name": "symbol",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "authorize_account",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "deauthorize_account",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "set_updated_coin_infos",
                      "fields": [
                        {
                          "name": "coin_infos",
                          "type": 73,
                          "typeName": "Vec<((Vec<u8>, Vec<u8>), CoinInfo)>"
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "set_batching_api",
                      "fields": [
                        {
                          "name": "api",
                          "type": 12,
                          "typeName": "Vec<u8>"
                        }
                      ],
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 148,
            "type": {
              "path": [
                "clients_info",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_current_client_release",
                      "fields": [
                        {
                          "name": "client_name",
                          "type": 79,
                          "typeName": "NameOf<T>"
                        },
                        {
                          "name": "release",
                          "type": 78,
                          "typeName": "ClientRelease<UriOf<T>, T::Hash>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the current client release version, in case of a bug fix or patch.",
                        "",
                        "# Arguments",
                        "* `client_name` - raw byte string representation of the client name (e.g. `b\"vault\"`)",
                        "* `release` - The release information for the given `client_name`"
                      ]
                    },
                    {
                      "name": "set_pending_client_release",
                      "fields": [
                        {
                          "name": "client_name",
                          "type": 79,
                          "typeName": "NameOf<T>"
                        },
                        {
                          "name": "release",
                          "type": 78,
                          "typeName": "ClientRelease<UriOf<T>, T::Hash>"
                        }
                      ],
                      "index": 1,
                      "docs": [
                        "Sets the pending client release version. To be batched alongside the",
                        "`parachainSystem.authorizeUpgrade` Cumulus call.",
                        "Clients include the vault, oracle, and faucet.",
                        "",
                        "# Arguments",
                        "* `client_name` - raw byte string representation of the client name (e.g. `b\"vault\"`)",
                        "* `release` - The release information for the given `client_name`"
                      ]
                    },
                    {
                      "name": "authorize_account",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "deauthorize_account",
                      "fields": [
                        {
                          "name": "account_id",
                          "type": 0,
                          "typeName": "T::AccountId"
                        }
                      ],
                      "index": 3
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 149,
            "type": {
              "path": [
                "reward_distribution",
                "pallet",
                "Call"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "set_reward_per_block",
                      "fields": [
                        {
                          "name": "new_reward_per_block",
                          "type": 6,
                          "typeName": "BalanceOf<T>"
                        }
                      ],
                      "index": 0,
                      "docs": [
                        "Sets the reward per block."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Contains one variant per dispatchable that can be called by an extrinsic."
              ]
            }
          },
          {
            "id": 150,
            "type": {
              "path": [
                "pallet_sudo",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "RequireSudo",
                      "index": 0,
                      "docs": [
                        "Sender must be the Sudo account"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "Error for the Sudo pallet"
              ]
            }
          },
          {
            "id": 151,
            "type": {
              "def": {
                "tuple": [
                  0,
                  39
                ]
              }
            }
          },
          {
            "id": 152,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 153
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 154,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 153,
            "type": {
              "path": [
                "orml_tokens",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 43,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 154,
            "type": {
              "def": {
                "sequence": {
                  "type": 153
                }
              }
            }
          },
          {
            "id": 155,
            "type": {
              "path": [
                "orml_tokens",
                "AccountData"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "free",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reserved",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "frozen",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 156,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 157
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 158,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 157,
            "type": {
              "path": [
                "orml_tokens",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 43
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 43,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 158,
            "type": {
              "def": {
                "sequence": {
                  "type": 157
                }
              }
            }
          },
          {
            "id": 159,
            "type": {
              "path": [
                "orml_tokens",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "BalanceTooLow",
                      "index": 0,
                      "docs": [
                        "The balance is too low"
                      ]
                    },
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 1,
                      "docs": [
                        "Cannot convert Amount into Balance type"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 2,
                      "docs": [
                        "Failed because liquidity restrictions due to locking"
                      ]
                    },
                    {
                      "name": "MaxLocksExceeded",
                      "index": 3,
                      "docs": [
                        "Failed because the maximum locks was exceeded"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 5,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 160,
            "type": {
              "path": [
                "orml_currencies",
                "module",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountIntoBalanceFailed",
                      "index": 0,
                      "docs": [
                        "Unable to convert the Amount type into Balance."
                      ]
                    },
                    {
                      "name": "BalanceTooLow",
                      "index": 1,
                      "docs": [
                        "Balance is too low."
                      ]
                    },
                    {
                      "name": "DepositFailed",
                      "index": 2,
                      "docs": [
                        "Deposit result is not expected"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 161,
            "type": {
              "path": [
                "bounded_collections",
                "weak_bounded_vec",
                "WeakBoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 162
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 164,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 162,
            "type": {
              "path": [
                "pallet_balances",
                "BalanceLock"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 43,
                      "typeName": "LockIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "reasons",
                      "type": 163,
                      "typeName": "Reasons"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 163,
            "type": {
              "path": [
                "pallet_balances",
                "Reasons"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Fee",
                      "index": 0
                    },
                    {
                      "name": "Misc",
                      "index": 1
                    },
                    {
                      "name": "All",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 164,
            "type": {
              "def": {
                "sequence": {
                  "type": 162
                }
              }
            }
          },
          {
            "id": 165,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 166
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 167,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 166,
            "type": {
              "path": [
                "pallet_balances",
                "ReserveData"
              ],
              "params": [
                {
                  "name": "ReserveIdentifier",
                  "type": 43
                },
                {
                  "name": "Balance",
                  "type": 6
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 43,
                      "typeName": "ReserveIdentifier"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 167,
            "type": {
              "def": {
                "sequence": {
                  "type": 166
                }
              }
            }
          },
          {
            "id": 168,
            "type": {
              "path": [
                "pallet_balances",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VestingBalance",
                      "index": 0,
                      "docs": [
                        "Vesting balance too high to send value"
                      ]
                    },
                    {
                      "name": "LiquidityRestrictions",
                      "index": 1,
                      "docs": [
                        "Account liquidity restrictions prevent withdrawal"
                      ]
                    },
                    {
                      "name": "InsufficientBalance",
                      "index": 2,
                      "docs": [
                        "Balance too low to send value."
                      ]
                    },
                    {
                      "name": "ExistentialDeposit",
                      "index": 3,
                      "docs": [
                        "Value too low to create account due to existential deposit"
                      ]
                    },
                    {
                      "name": "KeepAlive",
                      "index": 4,
                      "docs": [
                        "Transfer/payment would kill account"
                      ]
                    },
                    {
                      "name": "ExistingVestingSchedule",
                      "index": 5,
                      "docs": [
                        "A vesting schedule already exists for this account"
                      ]
                    },
                    {
                      "name": "DeadAccount",
                      "index": 6,
                      "docs": [
                        "Beneficiary account must pre-exist"
                      ]
                    },
                    {
                      "name": "TooManyReserves",
                      "index": 7,
                      "docs": [
                        "Number of named reserves exceed MaxReserves"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 169,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "Releases"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V1Ancient",
                      "index": 0
                    },
                    {
                      "name": "V2",
                      "index": 1
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 170,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 137
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 136,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 171,
            "type": {
              "path": [
                "bounded_collections",
                "bounded_vec",
                "BoundedVec"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 134
                },
                {
                  "name": "S",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 133,
                      "typeName": "Vec<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 172,
            "type": {
              "path": [
                "stellar_relay",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Base64DecodeError",
                      "index": 0
                    },
                    {
                      "name": "BoundedVecCreationFailed",
                      "index": 1
                    },
                    {
                      "name": "DuplicateOrganizationId",
                      "index": 2
                    },
                    {
                      "name": "DuplicateValidatorPublicKey",
                      "index": 3
                    },
                    {
                      "name": "EmptyEnvelopeSet",
                      "index": 4
                    },
                    {
                      "name": "EnvelopeSignedByUnknownValidator",
                      "index": 5
                    },
                    {
                      "name": "EnvelopeSlotIndexMismatch",
                      "index": 6
                    },
                    {
                      "name": "ExternalizedNHMismatch",
                      "index": 7
                    },
                    {
                      "name": "ExternalizedValueMismatch",
                      "index": 8
                    },
                    {
                      "name": "FailedToComputeNonGenericTxSetContentHash",
                      "index": 9
                    },
                    {
                      "name": "InvalidEnvelopeSignature",
                      "index": 10
                    },
                    {
                      "name": "InvalidQuorumSetNotEnoughOrganizations",
                      "index": 11
                    },
                    {
                      "name": "InvalidQuorumSetNotEnoughValidators",
                      "index": 12
                    },
                    {
                      "name": "InvalidScpPledge",
                      "index": 13
                    },
                    {
                      "name": "InvalidTransactionSetPrefix",
                      "index": 14
                    },
                    {
                      "name": "InvalidXDR",
                      "index": 15
                    },
                    {
                      "name": "MissingExternalizedMessage",
                      "index": 16
                    },
                    {
                      "name": "NoOrganizationsRegistered",
                      "index": 17
                    },
                    {
                      "name": "NoValidatorsRegistered",
                      "index": 18
                    },
                    {
                      "name": "OrganizationLimitExceeded",
                      "index": 19
                    },
                    {
                      "name": "SlotIndexIsNone",
                      "index": 20
                    },
                    {
                      "name": "TransactionMemoDoesNotMatch",
                      "index": 21
                    },
                    {
                      "name": "TransactionNotInTransactionSet",
                      "index": 22
                    },
                    {
                      "name": "TransactionSetHashCreationFailed",
                      "index": 23
                    },
                    {
                      "name": "TransactionSetHashMismatch",
                      "index": 24
                    },
                    {
                      "name": "ValidatorLimitExceeded",
                      "index": 25
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 173,
            "type": {
              "def": {
                "tuple": [
                  39,
                  48
                ]
              }
            }
          },
          {
            "id": 174,
            "type": {
              "path": [
                "reward",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                },
                {
                  "name": "I",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TryIntoIntError",
                      "index": 0,
                      "docs": [
                        "Unable to convert value."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 1,
                      "docs": [
                        "Balance not sufficient to withdraw stake."
                      ]
                    },
                    {
                      "name": "ZeroTotalStake",
                      "index": 2,
                      "docs": [
                        "Cannot distribute rewards without stake."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 175,
            "type": {
              "def": {
                "tuple": [
                  4,
                  48
                ]
              }
            }
          },
          {
            "id": 176,
            "type": {
              "def": {
                "tuple": [
                  39,
                  175
                ]
              }
            }
          },
          {
            "id": 177,
            "type": {
              "def": {
                "tuple": [
                  4,
                  178
                ]
              }
            }
          },
          {
            "id": 178,
            "type": {
              "def": {
                "tuple": [
                  48,
                  0
                ]
              }
            }
          },
          {
            "id": 179,
            "type": {
              "def": {
                "tuple": [
                  39,
                  180
                ]
              }
            }
          },
          {
            "id": 180,
            "type": {
              "def": {
                "tuple": [
                  4,
                  48,
                  0
                ]
              }
            }
          },
          {
            "id": 181,
            "type": {
              "path": [
                "staking",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TryIntoIntError",
                      "index": 0,
                      "docs": [
                        "Unable to convert value."
                      ]
                    },
                    {
                      "name": "InsufficientFunds",
                      "index": 1,
                      "docs": [
                        "Balance not sufficient to withdraw stake."
                      ]
                    },
                    {
                      "name": "SlashZeroTotalStake",
                      "index": 2,
                      "docs": [
                        "Cannot slash zero total stake."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 182,
            "type": {
              "path": [
                "currency",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AssetConversionError",
                      "index": 0
                    },
                    {
                      "name": "BalanceConversionError",
                      "index": 1
                    },
                    {
                      "name": "CompatibleRoundingFailed",
                      "index": 2
                    },
                    {
                      "name": "IncompatibleAmount",
                      "index": 3
                    },
                    {
                      "name": "InvalidCurrency",
                      "index": 4
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 5
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 183,
            "type": {
              "path": [
                "BTreeSet"
              ],
              "params": [
                {
                  "name": "T",
                  "type": 56
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 55
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 184,
            "type": {
              "path": [
                "primitive_types",
                "U256"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 185,
                      "typeName": "[u64; 4]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 185,
            "type": {
              "def": {
                "array": {
                  "len": 4,
                  "type": 10
                }
              }
            }
          },
          {
            "id": 186,
            "type": {
              "path": [
                "security",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ParachainNotRunning",
                      "index": 0,
                      "docs": [
                        "Parachain is not running."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 187,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "SystemVault"
              ],
              "params": [
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "to_be_issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "to_be_redeemed_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "currency_pair",
                      "type": 49,
                      "typeName": "VaultCurrencyPair<CurrencyId>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 188,
            "type": {
              "path": [
                "vault_registry",
                "types",
                "Vault"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 39
                },
                {
                  "name": "UnsignedFixedPoint",
                  "type": 64
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "id",
                      "type": 48,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "status",
                      "type": 58,
                      "typeName": "VaultStatus"
                    },
                    {
                      "name": "banned_until",
                      "type": 108,
                      "typeName": "Option<BlockNumber>"
                    },
                    {
                      "name": "secure_collateral_threshold",
                      "type": 140,
                      "typeName": "Option<UnsignedFixedPoint>"
                    },
                    {
                      "name": "to_be_issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "issued_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "to_be_redeemed_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "to_be_replaced_tokens",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "replace_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "active_replace_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "liquidated_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 189,
            "type": {
              "path": [
                "frame_support",
                "PalletId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 43,
                      "typeName": "[u8; 8]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 190,
            "type": {
              "path": [
                "vault_registry",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InsufficientCollateral",
                      "index": 0,
                      "docs": [
                        "Not enough free collateral available."
                      ]
                    },
                    {
                      "name": "ExceedingVaultLimit",
                      "index": 1,
                      "docs": [
                        "The amount of tokens to be issued is higher than the issuable amount by the vault"
                      ]
                    },
                    {
                      "name": "InsufficientTokensCommitted",
                      "index": 2,
                      "docs": [
                        "The requested amount of tokens exceeds the amount available to this vault."
                      ]
                    },
                    {
                      "name": "VaultBanned",
                      "index": 3,
                      "docs": [
                        "Action not allowed on banned vault."
                      ]
                    },
                    {
                      "name": "InsufficientVaultCollateralAmount",
                      "index": 4,
                      "docs": [
                        "The provided collateral was insufficient - it must be above ``MinimumCollateralVault``."
                      ]
                    },
                    {
                      "name": "VaultAlreadyRegistered",
                      "index": 5,
                      "docs": [
                        "Returned if a vault tries to register while already being registered"
                      ]
                    },
                    {
                      "name": "VaultNotFound",
                      "index": 6,
                      "docs": [
                        "The specified vault does not exist."
                      ]
                    },
                    {
                      "name": "VaultNotBelowLiquidationThreshold",
                      "index": 7,
                      "docs": [
                        "Attempted to liquidate a vault that is not undercollateralized."
                      ]
                    },
                    {
                      "name": "InvalidPublicKey",
                      "index": 8,
                      "docs": [
                        "Deposit address could not be generated with the given public key."
                      ]
                    },
                    {
                      "name": "MaxNominationRatioViolation",
                      "index": 9,
                      "docs": [
                        "The Max Nomination Ratio would be exceeded."
                      ]
                    },
                    {
                      "name": "CurrencyCeilingExceeded",
                      "index": 10,
                      "docs": [
                        "The collateral ceiling would be exceeded for the vault's currency."
                      ]
                    },
                    {
                      "name": "VaultLiquidated",
                      "index": 11,
                      "docs": [
                        "Vault is no longer usable as it was liquidated due to undercollateralization."
                      ]
                    },
                    {
                      "name": "VaultNotRecoverable",
                      "index": 12,
                      "docs": [
                        "Vault must be liquidated."
                      ]
                    },
                    {
                      "name": "NoStellarPublicKey",
                      "index": 13,
                      "docs": [
                        "No Stellar public key is registered for the vault."
                      ]
                    },
                    {
                      "name": "PublicKeyAlreadyRegistered",
                      "index": 14,
                      "docs": [
                        "A Stellar public key was already registered for this account."
                      ]
                    },
                    {
                      "name": "NoTokensIssued",
                      "index": 15,
                      "docs": [
                        "Collateralization is infinite if no tokens are issued"
                      ]
                    },
                    {
                      "name": "NoVaultWithSufficientCollateral",
                      "index": 16
                    },
                    {
                      "name": "NoVaultWithSufficientTokens",
                      "index": 17
                    },
                    {
                      "name": "NoVaultUnderThePremiumRedeemThreshold",
                      "index": 18
                    },
                    {
                      "name": "InvalidCurrency",
                      "index": 19,
                      "docs": [
                        "Failed attempt to modify vault's collateral because it was in the wrong currency"
                      ]
                    },
                    {
                      "name": "GlobalThresholdNotSet",
                      "index": 20,
                      "docs": [
                        "Threshold was not found for the given currency"
                      ]
                    },
                    {
                      "name": "LiquidationCollateralThresholdNotSet",
                      "index": 21,
                      "docs": [
                        "Threshold was not found for the given currency"
                      ]
                    },
                    {
                      "name": "PremiumRedeemThresholdNotSet",
                      "index": 22,
                      "docs": [
                        "Threshold was not found for the given currency"
                      ]
                    },
                    {
                      "name": "SecureCollateralThresholdNotSet",
                      "index": 23,
                      "docs": [
                        "Threshold was not found for the given currency"
                      ]
                    },
                    {
                      "name": "CeilingNotSet",
                      "index": 24,
                      "docs": [
                        "Ceiling was not found for the given currency"
                      ]
                    },
                    {
                      "name": "ThresholdNotAboveGlobalThreshold",
                      "index": 25,
                      "docs": [
                        "Vault attempted to set secure threshold below the global secure threshold"
                      ]
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 26,
                      "docs": [
                        "Unable to convert value"
                      ]
                    },
                    {
                      "name": "VaultNotAcceptingIssueRequests",
                      "index": 27,
                      "docs": [
                        "Vault is not accepting new issue requests."
                      ]
                    },
                    {
                      "name": "MinimumCollateralNotSet",
                      "index": 28
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 191,
            "type": {
              "path": [
                "oracle",
                "types",
                "Version"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "V0",
                      "index": 0
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 192,
            "type": {
              "path": [
                "oracle",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "InvalidOracleSource",
                      "index": 0,
                      "docs": [
                        "Not authorized to set exchange rate"
                      ]
                    },
                    {
                      "name": "MissingExchangeRate",
                      "index": 1,
                      "docs": [
                        "Exchange rate not specified or has expired"
                      ]
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 2,
                      "docs": [
                        "Unable to convert value"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 193,
            "type": {
              "path": [
                "spacewalk_primitives",
                "issue",
                "IssueRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vault",
                      "type": 48,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "opentime",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "griefing_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "asset",
                      "type": 39,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "requester",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stellar_address",
                      "type": 1,
                      "typeName": "StellarPublicKeyRaw"
                    },
                    {
                      "name": "status",
                      "type": 194,
                      "typeName": "IssueRequestStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 194,
            "type": {
              "path": [
                "spacewalk_primitives",
                "issue",
                "IssueRequestStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "index": 0
                    },
                    {
                      "name": "Completed",
                      "index": 1
                    },
                    {
                      "name": "Cancelled",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 195,
            "type": {
              "path": [
                "issue",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "IssueIdNotFound",
                      "index": 0,
                      "docs": [
                        "Issue request not found."
                      ]
                    },
                    {
                      "name": "TimeNotExpired",
                      "index": 1,
                      "docs": [
                        "Issue request has not expired."
                      ]
                    },
                    {
                      "name": "IssueCompleted",
                      "index": 2,
                      "docs": [
                        "Issue request already completed."
                      ]
                    },
                    {
                      "name": "IssueCancelled",
                      "index": 3,
                      "docs": [
                        "Issue request already cancelled."
                      ]
                    },
                    {
                      "name": "VaultNotAcceptingNewIssues",
                      "index": 4,
                      "docs": [
                        "Vault is not active."
                      ]
                    },
                    {
                      "name": "InvalidExecutor",
                      "index": 5,
                      "docs": [
                        "Not expected origin."
                      ]
                    },
                    {
                      "name": "AmountBelowMinimumTransferAmount",
                      "index": 6,
                      "docs": [
                        "Issue amount is too small."
                      ]
                    },
                    {
                      "name": "ExceedLimitVolumeForIssueRequest",
                      "index": 7,
                      "docs": [
                        "Exceeds the volume limit for an issue request."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 196,
            "type": {
              "path": [
                "spacewalk_primitives",
                "redeem",
                "RedeemRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "vault",
                      "type": 48,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "opentime",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "transfer_fee",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "asset",
                      "type": 39,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "premium",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "redeemer",
                      "type": 0,
                      "typeName": "AccountId"
                    },
                    {
                      "name": "stellar_address",
                      "type": 1,
                      "typeName": "StellarPublicKeyRaw"
                    },
                    {
                      "name": "status",
                      "type": 69,
                      "typeName": "RedeemRequestStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 197,
            "type": {
              "def": {
                "tuple": [
                  6,
                  39
                ]
              }
            }
          },
          {
            "id": 198,
            "type": {
              "path": [
                "redeem",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "AmountExceedsUserBalance",
                      "index": 0,
                      "docs": [
                        "Account has insufficient balance."
                      ]
                    },
                    {
                      "name": "UnauthorizedRedeemer",
                      "index": 1,
                      "docs": [
                        "Unexpected redeem account."
                      ]
                    },
                    {
                      "name": "UnauthorizedVault",
                      "index": 2,
                      "docs": [
                        "Unexpected vault account."
                      ]
                    },
                    {
                      "name": "TimeNotExpired",
                      "index": 3,
                      "docs": [
                        "Redeem request has not expired."
                      ]
                    },
                    {
                      "name": "RedeemCancelled",
                      "index": 4,
                      "docs": [
                        "Redeem request already cancelled."
                      ]
                    },
                    {
                      "name": "RedeemCompleted",
                      "index": 5,
                      "docs": [
                        "Redeem request already completed."
                      ]
                    },
                    {
                      "name": "RedeemIdNotFound",
                      "index": 6,
                      "docs": [
                        "Redeem request not found."
                      ]
                    },
                    {
                      "name": "TryIntoIntError",
                      "index": 7,
                      "docs": [
                        "Unable to convert value."
                      ]
                    },
                    {
                      "name": "AmountBelowMinimumTransferAmount",
                      "index": 8,
                      "docs": [
                        "Redeem amount is too small."
                      ]
                    },
                    {
                      "name": "ExceedLimitVolumeForRedeemRequest",
                      "index": 9,
                      "docs": [
                        "Exceeds the volume limit for a redeem request."
                      ]
                    },
                    {
                      "name": "InvalidPaymentAmount",
                      "index": 10,
                      "docs": [
                        "Invalid payment amount"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 199,
            "type": {
              "path": [
                "spacewalk_primitives",
                "replace",
                "ReplaceRequest"
              ],
              "params": [
                {
                  "name": "AccountId",
                  "type": 0
                },
                {
                  "name": "BlockNumber",
                  "type": 4
                },
                {
                  "name": "Balance",
                  "type": 6
                },
                {
                  "name": "CurrencyId",
                  "type": 39
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "old_vault",
                      "type": 48,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "new_vault",
                      "type": 48,
                      "typeName": "VaultId<AccountId, CurrencyId>"
                    },
                    {
                      "name": "amount",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "asset",
                      "type": 39,
                      "typeName": "CurrencyId"
                    },
                    {
                      "name": "griefing_collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "collateral",
                      "type": 6,
                      "typeName": "Balance"
                    },
                    {
                      "name": "accept_time",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "period",
                      "type": 4,
                      "typeName": "BlockNumber"
                    },
                    {
                      "name": "stellar_address",
                      "type": 1,
                      "typeName": "StellarPublicKeyRaw"
                    },
                    {
                      "name": "status",
                      "type": 200,
                      "typeName": "ReplaceRequestStatus"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 200,
            "type": {
              "path": [
                "spacewalk_primitives",
                "replace",
                "ReplaceRequestStatus"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Pending",
                      "index": 0
                    },
                    {
                      "name": "Completed",
                      "index": 1
                    },
                    {
                      "name": "Cancelled",
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 201,
            "type": {
              "path": [
                "replace",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ReplaceAmountZero",
                      "index": 0,
                      "docs": [
                        "Replace requires non-zero increase."
                      ]
                    },
                    {
                      "name": "AmountBelowDustAmount",
                      "index": 1,
                      "docs": [
                        "Replace amount is too small."
                      ]
                    },
                    {
                      "name": "NoPendingRequest",
                      "index": 2,
                      "docs": [
                        "No replace request found."
                      ]
                    },
                    {
                      "name": "UnauthorizedVault",
                      "index": 3,
                      "docs": [
                        "Unexpected vault account."
                      ]
                    },
                    {
                      "name": "ReplaceSelfNotAllowed",
                      "index": 4,
                      "docs": [
                        "Cannot replace self."
                      ]
                    },
                    {
                      "name": "VaultHasEnabledNomination",
                      "index": 5,
                      "docs": [
                        "Cannot replace with nominated collateral."
                      ]
                    },
                    {
                      "name": "ReplacePeriodNotExpired",
                      "index": 6,
                      "docs": [
                        "Replace request has not expired."
                      ]
                    },
                    {
                      "name": "ReplaceCompleted",
                      "index": 7,
                      "docs": [
                        "Replace request already completed."
                      ]
                    },
                    {
                      "name": "ReplaceCancelled",
                      "index": 8,
                      "docs": [
                        "Replace request already cancelled."
                      ]
                    },
                    {
                      "name": "ReplaceIdNotFound",
                      "index": 9,
                      "docs": [
                        "Replace request not found."
                      ]
                    },
                    {
                      "name": "InvalidWrappedCurrency",
                      "index": 10,
                      "docs": [
                        "Vault cannot replace different currency."
                      ]
                    },
                    {
                      "name": "InvalidPaymentAmount",
                      "index": 11,
                      "docs": [
                        "Invalid payment amount"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 202,
            "type": {
              "path": [
                "fee",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "TryIntoIntError",
                      "index": 0,
                      "docs": [
                        "Unable to convert value."
                      ]
                    },
                    {
                      "name": "AboveMaxExpectedValue",
                      "index": 1,
                      "docs": [
                        "Value exceeds the expected upper bound for storage fields in this pallet."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 203,
            "type": {
              "path": [
                "nomination",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "VaultAlreadyOptedInToNomination",
                      "index": 0,
                      "docs": [
                        "Vault has already enabled nomination."
                      ]
                    },
                    {
                      "name": "VaultNotOptedInToNomination",
                      "index": 1,
                      "docs": [
                        "Vault has not enabled nomination."
                      ]
                    },
                    {
                      "name": "VaultNotFound",
                      "index": 2,
                      "docs": [
                        "Vault not found."
                      ]
                    },
                    {
                      "name": "CannotWithdrawCollateral",
                      "index": 3,
                      "docs": [
                        "Account cannot withdraw."
                      ]
                    },
                    {
                      "name": "VaultNominationDisabled",
                      "index": 4,
                      "docs": [
                        "Nomination is not enabled."
                      ]
                    },
                    {
                      "name": "DepositViolatesMaxNominationRatio",
                      "index": 5,
                      "docs": [
                        "Nomination would overburden Vault."
                      ]
                    },
                    {
                      "name": "CollateralizationTooLow",
                      "index": 6,
                      "docs": [
                        "Vault cannot withdraw."
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 204,
            "type": {
              "path": [
                "dia_oracle",
                "dia",
                "AssetId"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "name": "blockchain",
                      "type": 12,
                      "typeName": "Vec<u8>"
                    },
                    {
                      "name": "symbol",
                      "type": 12,
                      "typeName": "Vec<u8>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 205,
            "type": {
              "path": [
                "dia_oracle",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "NoCoinInfoAvailable",
                      "index": 0,
                      "docs": [
                        "Error is returned if no information is available about given coin"
                      ]
                    },
                    {
                      "name": "ThisAccountIdIsNotAuthorized",
                      "index": 1,
                      "docs": [
                        "AccountId is not authorized"
                      ]
                    },
                    {
                      "name": "NoBatchingApiEndPoint",
                      "index": 2,
                      "docs": [
                        "Batching Api Endpoint not set."
                      ]
                    },
                    {
                      "name": "DeserializeStrError",
                      "index": 3,
                      "docs": [
                        "Failed Deserializing to str"
                      ]
                    },
                    {
                      "name": "DeserializeError",
                      "index": 4,
                      "docs": [
                        "Failed Deserializing"
                      ]
                    },
                    {
                      "name": "HttpRequestSendFailed",
                      "index": 5,
                      "docs": [
                        "Sending Http request to Batching Server Failed"
                      ]
                    },
                    {
                      "name": "HttpRequestFailed",
                      "index": 6,
                      "docs": [
                        "Http request to Batching Server Failed"
                      ]
                    },
                    {
                      "name": "FailedSignedTransaction",
                      "index": 7,
                      "docs": [
                        "Failed to send signed Transaction"
                      ]
                    },
                    {
                      "name": "UserUnableToDeauthorizeThemself",
                      "index": 8,
                      "docs": [
                        "User cannot deauthorized themself"
                      ]
                    },
                    {
                      "name": "BadOrigin",
                      "index": 9,
                      "docs": [
                        "BadOrigin"
                      ]
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 206,
            "type": {
              "path": [
                "clients_info",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "ThisAccountIdIsNotAuthorized",
                      "index": 0
                    },
                    {
                      "name": "UserUnableToDeauthorizeThemself",
                      "index": 1
                    }
                  ]
                }
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 207,
            "type": {
              "path": [
                "sp_arithmetic",
                "per_things",
                "Perquintill"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 10,
                      "typeName": "u64"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 208,
            "type": {
              "path": [
                "reward_distribution",
                "pallet",
                "Error"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "variant": {}
              },
              "docs": [
                "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"
              ]
            }
          },
          {
            "id": 209,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "unchecked_extrinsic",
                "UncheckedExtrinsic"
              ],
              "params": [
                {
                  "name": "Address",
                  "type": 126
                },
                {
                  "name": "Call",
                  "type": 124
                },
                {
                  "name": "Signature",
                  "type": 210
                },
                {
                  "name": "Extra",
                  "type": 214
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 12
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 210,
            "type": {
              "path": [
                "sp_runtime",
                "MultiSignature"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Ed25519",
                      "fields": [
                        {
                          "type": 115,
                          "typeName": "ed25519::Signature"
                        }
                      ],
                      "index": 0
                    },
                    {
                      "name": "Sr25519",
                      "fields": [
                        {
                          "type": 211,
                          "typeName": "sr25519::Signature"
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Ecdsa",
                      "fields": [
                        {
                          "type": 212,
                          "typeName": "ecdsa::Signature"
                        }
                      ],
                      "index": 2
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 211,
            "type": {
              "path": [
                "sp_core",
                "sr25519",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 116,
                      "typeName": "[u8; 64]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 212,
            "type": {
              "path": [
                "sp_core",
                "ecdsa",
                "Signature"
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 213,
                      "typeName": "[u8; 65]"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 213,
            "type": {
              "def": {
                "array": {
                  "len": 65,
                  "type": 2
                }
              }
            }
          },
          {
            "id": 214,
            "type": {
              "def": {
                "tuple": [
                  215,
                  216,
                  217,
                  218,
                  220,
                  221,
                  222
                ]
              }
            }
          },
          {
            "id": 215,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_spec_version",
                "CheckSpecVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 216,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_tx_version",
                "CheckTxVersion"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 217,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_genesis",
                "CheckGenesis"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 218,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_mortality",
                "CheckMortality"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 219,
                      "typeName": "Era"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 219,
            "type": {
              "path": [
                "sp_runtime",
                "generic",
                "era",
                "Era"
              ],
              "def": {
                "variant": {
                  "variants": [
                    {
                      "name": "Immortal",
                      "index": 0
                    },
                    {
                      "name": "Mortal1",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 1
                    },
                    {
                      "name": "Mortal2",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 2
                    },
                    {
                      "name": "Mortal3",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 3
                    },
                    {
                      "name": "Mortal4",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 4
                    },
                    {
                      "name": "Mortal5",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 5
                    },
                    {
                      "name": "Mortal6",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 6
                    },
                    {
                      "name": "Mortal7",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 7
                    },
                    {
                      "name": "Mortal8",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 8
                    },
                    {
                      "name": "Mortal9",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 9
                    },
                    {
                      "name": "Mortal10",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 10
                    },
                    {
                      "name": "Mortal11",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 11
                    },
                    {
                      "name": "Mortal12",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 12
                    },
                    {
                      "name": "Mortal13",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 13
                    },
                    {
                      "name": "Mortal14",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 14
                    },
                    {
                      "name": "Mortal15",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 15
                    },
                    {
                      "name": "Mortal16",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 16
                    },
                    {
                      "name": "Mortal17",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 17
                    },
                    {
                      "name": "Mortal18",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 18
                    },
                    {
                      "name": "Mortal19",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 19
                    },
                    {
                      "name": "Mortal20",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 20
                    },
                    {
                      "name": "Mortal21",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 21
                    },
                    {
                      "name": "Mortal22",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 22
                    },
                    {
                      "name": "Mortal23",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 23
                    },
                    {
                      "name": "Mortal24",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 24
                    },
                    {
                      "name": "Mortal25",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 25
                    },
                    {
                      "name": "Mortal26",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 26
                    },
                    {
                      "name": "Mortal27",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 27
                    },
                    {
                      "name": "Mortal28",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 28
                    },
                    {
                      "name": "Mortal29",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 29
                    },
                    {
                      "name": "Mortal30",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 30
                    },
                    {
                      "name": "Mortal31",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 31
                    },
                    {
                      "name": "Mortal32",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 32
                    },
                    {
                      "name": "Mortal33",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 33
                    },
                    {
                      "name": "Mortal34",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 34
                    },
                    {
                      "name": "Mortal35",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 35
                    },
                    {
                      "name": "Mortal36",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 36
                    },
                    {
                      "name": "Mortal37",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 37
                    },
                    {
                      "name": "Mortal38",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 38
                    },
                    {
                      "name": "Mortal39",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 39
                    },
                    {
                      "name": "Mortal40",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 40
                    },
                    {
                      "name": "Mortal41",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 41
                    },
                    {
                      "name": "Mortal42",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 42
                    },
                    {
                      "name": "Mortal43",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 43
                    },
                    {
                      "name": "Mortal44",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 44
                    },
                    {
                      "name": "Mortal45",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 45
                    },
                    {
                      "name": "Mortal46",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 46
                    },
                    {
                      "name": "Mortal47",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 47
                    },
                    {
                      "name": "Mortal48",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 48
                    },
                    {
                      "name": "Mortal49",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 49
                    },
                    {
                      "name": "Mortal50",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 50
                    },
                    {
                      "name": "Mortal51",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 51
                    },
                    {
                      "name": "Mortal52",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 52
                    },
                    {
                      "name": "Mortal53",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 53
                    },
                    {
                      "name": "Mortal54",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 54
                    },
                    {
                      "name": "Mortal55",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 55
                    },
                    {
                      "name": "Mortal56",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 56
                    },
                    {
                      "name": "Mortal57",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 57
                    },
                    {
                      "name": "Mortal58",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 58
                    },
                    {
                      "name": "Mortal59",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 59
                    },
                    {
                      "name": "Mortal60",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 60
                    },
                    {
                      "name": "Mortal61",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 61
                    },
                    {
                      "name": "Mortal62",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 62
                    },
                    {
                      "name": "Mortal63",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 63
                    },
                    {
                      "name": "Mortal64",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 64
                    },
                    {
                      "name": "Mortal65",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 65
                    },
                    {
                      "name": "Mortal66",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 66
                    },
                    {
                      "name": "Mortal67",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 67
                    },
                    {
                      "name": "Mortal68",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 68
                    },
                    {
                      "name": "Mortal69",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 69
                    },
                    {
                      "name": "Mortal70",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 70
                    },
                    {
                      "name": "Mortal71",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 71
                    },
                    {
                      "name": "Mortal72",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 72
                    },
                    {
                      "name": "Mortal73",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 73
                    },
                    {
                      "name": "Mortal74",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 74
                    },
                    {
                      "name": "Mortal75",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 75
                    },
                    {
                      "name": "Mortal76",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 76
                    },
                    {
                      "name": "Mortal77",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 77
                    },
                    {
                      "name": "Mortal78",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 78
                    },
                    {
                      "name": "Mortal79",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 79
                    },
                    {
                      "name": "Mortal80",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 80
                    },
                    {
                      "name": "Mortal81",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 81
                    },
                    {
                      "name": "Mortal82",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 82
                    },
                    {
                      "name": "Mortal83",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 83
                    },
                    {
                      "name": "Mortal84",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 84
                    },
                    {
                      "name": "Mortal85",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 85
                    },
                    {
                      "name": "Mortal86",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 86
                    },
                    {
                      "name": "Mortal87",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 87
                    },
                    {
                      "name": "Mortal88",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 88
                    },
                    {
                      "name": "Mortal89",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 89
                    },
                    {
                      "name": "Mortal90",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 90
                    },
                    {
                      "name": "Mortal91",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 91
                    },
                    {
                      "name": "Mortal92",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 92
                    },
                    {
                      "name": "Mortal93",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 93
                    },
                    {
                      "name": "Mortal94",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 94
                    },
                    {
                      "name": "Mortal95",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 95
                    },
                    {
                      "name": "Mortal96",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 96
                    },
                    {
                      "name": "Mortal97",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 97
                    },
                    {
                      "name": "Mortal98",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 98
                    },
                    {
                      "name": "Mortal99",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 99
                    },
                    {
                      "name": "Mortal100",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 100
                    },
                    {
                      "name": "Mortal101",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 101
                    },
                    {
                      "name": "Mortal102",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 102
                    },
                    {
                      "name": "Mortal103",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 103
                    },
                    {
                      "name": "Mortal104",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 104
                    },
                    {
                      "name": "Mortal105",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 105
                    },
                    {
                      "name": "Mortal106",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 106
                    },
                    {
                      "name": "Mortal107",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 107
                    },
                    {
                      "name": "Mortal108",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 108
                    },
                    {
                      "name": "Mortal109",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 109
                    },
                    {
                      "name": "Mortal110",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 110
                    },
                    {
                      "name": "Mortal111",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 111
                    },
                    {
                      "name": "Mortal112",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 112
                    },
                    {
                      "name": "Mortal113",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 113
                    },
                    {
                      "name": "Mortal114",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 114
                    },
                    {
                      "name": "Mortal115",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 115
                    },
                    {
                      "name": "Mortal116",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 116
                    },
                    {
                      "name": "Mortal117",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 117
                    },
                    {
                      "name": "Mortal118",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 118
                    },
                    {
                      "name": "Mortal119",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 119
                    },
                    {
                      "name": "Mortal120",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 120
                    },
                    {
                      "name": "Mortal121",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 121
                    },
                    {
                      "name": "Mortal122",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 122
                    },
                    {
                      "name": "Mortal123",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 123
                    },
                    {
                      "name": "Mortal124",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 124
                    },
                    {
                      "name": "Mortal125",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 125
                    },
                    {
                      "name": "Mortal126",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 126
                    },
                    {
                      "name": "Mortal127",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 127
                    },
                    {
                      "name": "Mortal128",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 128
                    },
                    {
                      "name": "Mortal129",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 129
                    },
                    {
                      "name": "Mortal130",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 130
                    },
                    {
                      "name": "Mortal131",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 131
                    },
                    {
                      "name": "Mortal132",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 132
                    },
                    {
                      "name": "Mortal133",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 133
                    },
                    {
                      "name": "Mortal134",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 134
                    },
                    {
                      "name": "Mortal135",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 135
                    },
                    {
                      "name": "Mortal136",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 136
                    },
                    {
                      "name": "Mortal137",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 137
                    },
                    {
                      "name": "Mortal138",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 138
                    },
                    {
                      "name": "Mortal139",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 139
                    },
                    {
                      "name": "Mortal140",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 140
                    },
                    {
                      "name": "Mortal141",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 141
                    },
                    {
                      "name": "Mortal142",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 142
                    },
                    {
                      "name": "Mortal143",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 143
                    },
                    {
                      "name": "Mortal144",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 144
                    },
                    {
                      "name": "Mortal145",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 145
                    },
                    {
                      "name": "Mortal146",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 146
                    },
                    {
                      "name": "Mortal147",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 147
                    },
                    {
                      "name": "Mortal148",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 148
                    },
                    {
                      "name": "Mortal149",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 149
                    },
                    {
                      "name": "Mortal150",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 150
                    },
                    {
                      "name": "Mortal151",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 151
                    },
                    {
                      "name": "Mortal152",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 152
                    },
                    {
                      "name": "Mortal153",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 153
                    },
                    {
                      "name": "Mortal154",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 154
                    },
                    {
                      "name": "Mortal155",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 155
                    },
                    {
                      "name": "Mortal156",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 156
                    },
                    {
                      "name": "Mortal157",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 157
                    },
                    {
                      "name": "Mortal158",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 158
                    },
                    {
                      "name": "Mortal159",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 159
                    },
                    {
                      "name": "Mortal160",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 160
                    },
                    {
                      "name": "Mortal161",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 161
                    },
                    {
                      "name": "Mortal162",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 162
                    },
                    {
                      "name": "Mortal163",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 163
                    },
                    {
                      "name": "Mortal164",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 164
                    },
                    {
                      "name": "Mortal165",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 165
                    },
                    {
                      "name": "Mortal166",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 166
                    },
                    {
                      "name": "Mortal167",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 167
                    },
                    {
                      "name": "Mortal168",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 168
                    },
                    {
                      "name": "Mortal169",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 169
                    },
                    {
                      "name": "Mortal170",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 170
                    },
                    {
                      "name": "Mortal171",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 171
                    },
                    {
                      "name": "Mortal172",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 172
                    },
                    {
                      "name": "Mortal173",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 173
                    },
                    {
                      "name": "Mortal174",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 174
                    },
                    {
                      "name": "Mortal175",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 175
                    },
                    {
                      "name": "Mortal176",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 176
                    },
                    {
                      "name": "Mortal177",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 177
                    },
                    {
                      "name": "Mortal178",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 178
                    },
                    {
                      "name": "Mortal179",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 179
                    },
                    {
                      "name": "Mortal180",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 180
                    },
                    {
                      "name": "Mortal181",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 181
                    },
                    {
                      "name": "Mortal182",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 182
                    },
                    {
                      "name": "Mortal183",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 183
                    },
                    {
                      "name": "Mortal184",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 184
                    },
                    {
                      "name": "Mortal185",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 185
                    },
                    {
                      "name": "Mortal186",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 186
                    },
                    {
                      "name": "Mortal187",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 187
                    },
                    {
                      "name": "Mortal188",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 188
                    },
                    {
                      "name": "Mortal189",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 189
                    },
                    {
                      "name": "Mortal190",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 190
                    },
                    {
                      "name": "Mortal191",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 191
                    },
                    {
                      "name": "Mortal192",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 192
                    },
                    {
                      "name": "Mortal193",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 193
                    },
                    {
                      "name": "Mortal194",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 194
                    },
                    {
                      "name": "Mortal195",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 195
                    },
                    {
                      "name": "Mortal196",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 196
                    },
                    {
                      "name": "Mortal197",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 197
                    },
                    {
                      "name": "Mortal198",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 198
                    },
                    {
                      "name": "Mortal199",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 199
                    },
                    {
                      "name": "Mortal200",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 200
                    },
                    {
                      "name": "Mortal201",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 201
                    },
                    {
                      "name": "Mortal202",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 202
                    },
                    {
                      "name": "Mortal203",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 203
                    },
                    {
                      "name": "Mortal204",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 204
                    },
                    {
                      "name": "Mortal205",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 205
                    },
                    {
                      "name": "Mortal206",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 206
                    },
                    {
                      "name": "Mortal207",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 207
                    },
                    {
                      "name": "Mortal208",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 208
                    },
                    {
                      "name": "Mortal209",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 209
                    },
                    {
                      "name": "Mortal210",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 210
                    },
                    {
                      "name": "Mortal211",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 211
                    },
                    {
                      "name": "Mortal212",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 212
                    },
                    {
                      "name": "Mortal213",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 213
                    },
                    {
                      "name": "Mortal214",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 214
                    },
                    {
                      "name": "Mortal215",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 215
                    },
                    {
                      "name": "Mortal216",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 216
                    },
                    {
                      "name": "Mortal217",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 217
                    },
                    {
                      "name": "Mortal218",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 218
                    },
                    {
                      "name": "Mortal219",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 219
                    },
                    {
                      "name": "Mortal220",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 220
                    },
                    {
                      "name": "Mortal221",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 221
                    },
                    {
                      "name": "Mortal222",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 222
                    },
                    {
                      "name": "Mortal223",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 223
                    },
                    {
                      "name": "Mortal224",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 224
                    },
                    {
                      "name": "Mortal225",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 225
                    },
                    {
                      "name": "Mortal226",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 226
                    },
                    {
                      "name": "Mortal227",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 227
                    },
                    {
                      "name": "Mortal228",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 228
                    },
                    {
                      "name": "Mortal229",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 229
                    },
                    {
                      "name": "Mortal230",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 230
                    },
                    {
                      "name": "Mortal231",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 231
                    },
                    {
                      "name": "Mortal232",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 232
                    },
                    {
                      "name": "Mortal233",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 233
                    },
                    {
                      "name": "Mortal234",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 234
                    },
                    {
                      "name": "Mortal235",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 235
                    },
                    {
                      "name": "Mortal236",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 236
                    },
                    {
                      "name": "Mortal237",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 237
                    },
                    {
                      "name": "Mortal238",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 238
                    },
                    {
                      "name": "Mortal239",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 239
                    },
                    {
                      "name": "Mortal240",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 240
                    },
                    {
                      "name": "Mortal241",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 241
                    },
                    {
                      "name": "Mortal242",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 242
                    },
                    {
                      "name": "Mortal243",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 243
                    },
                    {
                      "name": "Mortal244",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 244
                    },
                    {
                      "name": "Mortal245",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 245
                    },
                    {
                      "name": "Mortal246",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 246
                    },
                    {
                      "name": "Mortal247",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 247
                    },
                    {
                      "name": "Mortal248",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 248
                    },
                    {
                      "name": "Mortal249",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 249
                    },
                    {
                      "name": "Mortal250",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 250
                    },
                    {
                      "name": "Mortal251",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 251
                    },
                    {
                      "name": "Mortal252",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 252
                    },
                    {
                      "name": "Mortal253",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 253
                    },
                    {
                      "name": "Mortal254",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 254
                    },
                    {
                      "name": "Mortal255",
                      "fields": [
                        {
                          "type": 2
                        }
                      ],
                      "index": 255
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 220,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_nonce",
                "CheckNonce"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 86,
                      "typeName": "T::Index"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 221,
            "type": {
              "path": [
                "frame_system",
                "extensions",
                "check_weight",
                "CheckWeight"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {}
              }
            }
          },
          {
            "id": 222,
            "type": {
              "path": [
                "pallet_transaction_payment",
                "ChargeTransactionPayment"
              ],
              "params": [
                {
                  "name": "T",
                  "type": null
                }
              ],
              "def": {
                "composite": {
                  "fields": [
                    {
                      "type": 129,
                      "typeName": "BalanceOf<T>"
                    }
                  ]
                }
              }
            }
          },
          {
            "id": 223,
            "type": {
              "path": [
                "spacewalk_runtime_standalone",
                "Runtime"
              ],
              "def": {
                "composite": {}
              }
            }
          }
        ]
      },
      "pallets": [
        {
          "name": "System",
          "storage": {
            "prefix": "System",
            "entries": [
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 3
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The full account information for a particular account ID."
                ]
              },
              {
                "name": "ExtrinsicCount",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total extrinsics count for the current block."
                ]
              },
              {
                "name": "BlockWeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 7
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current weight for the block."
                ]
              },
              {
                "name": "AllExtrinsicsLen",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " Total length (in bytes) for all extrinsics put together, for the current block."
                ]
              },
              {
                "name": "BlockHash",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 11
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of block numbers to block hashes."
                ]
              },
              {
                "name": "ExtrinsicData",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 4,
                    "value": 12
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Extrinsics data for the current block (maps an extrinsic's index to its data)."
                ]
              },
              {
                "name": "Number",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The current block number being processed. Set by `execute_block`."
                ]
              },
              {
                "name": "ParentHash",
                "modifier": "Default",
                "ty": {
                  "Plain": 11
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Hash of the previous block."
                ]
              },
              {
                "name": "Digest",
                "modifier": "Default",
                "ty": {
                  "Plain": 13
                },
                "default": [
                  0
                ],
                "docs": [
                  " Digest of the current block, also part of the block header."
                ]
              },
              {
                "name": "Events",
                "modifier": "Default",
                "ty": {
                  "Plain": 17
                },
                "default": [
                  0
                ],
                "docs": [
                  " Events deposited for the current block.",
                  "",
                  " NOTE: The item is unbound and should therefore never be read on chain.",
                  " It could otherwise inflate the PoV size of a block.",
                  "",
                  " Events have a large in-memory size. Box the events to not go out-of-memory",
                  " just in case someone still reads them from within the runtime."
                ]
              },
              {
                "name": "EventCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of events in the `Events<T>` list."
                ]
              },
              {
                "name": "EventTopics",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 83
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping between a topic (represented by T::Hash) and a vector of indexes",
                  " of events in the `<Events<T>>` list.",
                  "",
                  " All topic vectors have deterministic storage locations depending on the topic. This",
                  " allows light-clients to leverage the changes trie storage tracking mechanism and",
                  " in case of changes fetch the list of events of interest.",
                  "",
                  " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just",
                  " the `EventIndex` then in case if the topic has the same contents on the next block",
                  " no notification will be triggered thus the event might be lost."
                ]
              },
              {
                "name": "LastRuntimeUpgrade",
                "modifier": "Optional",
                "ty": {
                  "Plain": 85
                },
                "default": [
                  0
                ],
                "docs": [
                  " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."
                ]
              },
              {
                "name": "UpgradedToU32RefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 59
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."
                ]
              },
              {
                "name": "UpgradedToTripleRefCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 59
                },
                "default": [
                  0
                ],
                "docs": [
                  " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False",
                  " (default) if not."
                ]
              },
              {
                "name": "ExecutionPhase",
                "modifier": "Optional",
                "ty": {
                  "Plain": 81
                },
                "default": [
                  0
                ],
                "docs": [
                  " The execution phase of the block."
                ]
              }
            ]
          },
          "calls": {
            "ty": 88
          },
          "event": {
            "ty": 20
          },
          "constants": [
            {
              "name": "BlockWeights",
              "ty": 91,
              "value": [
                98,
                79,
                215,
                90,
                0,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                2,
                192,
                205,
                23,
                0,
                1,
                11,
                0,
                88,
                22,
                168,
                46,
                1,
                19,
                102,
                102,
                102,
                102,
                102,
                102,
                102,
                166,
                1,
                11,
                0,
                152,
                247,
                62,
                93,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                191,
                1,
                0,
                0,
                2,
                192,
                205,
                23,
                0,
                1,
                11,
                0,
                224,
                104,
                18,
                163,
                1,
                19,
                102,
                102,
                102,
                102,
                102,
                102,
                102,
                230,
                1,
                11,
                0,
                32,
                74,
                169,
                209,
                1,
                19,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                255,
                1,
                7,
                0,
                136,
                82,
                106,
                116,
                19,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                64,
                2,
                192,
                205,
                23,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Block & extrinsics weights: base values and limits."
              ]
            },
            {
              "name": "BlockLength",
              "ty": 95,
              "value": [
                0,
                0,
                60,
                0,
                0,
                0,
                80,
                0,
                0,
                0,
                80,
                0
              ],
              "docs": [
                " The maximum length of a block (in bytes)."
              ]
            },
            {
              "name": "BlockHashCount",
              "ty": 4,
              "value": [
                250,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum number of block number to block hash mappings to keep (oldest pruned first)."
              ]
            },
            {
              "name": "DbWeight",
              "ty": 97,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The weight of runtime database operations the runtime can invoke."
              ]
            },
            {
              "name": "Version",
              "ty": 98,
              "value": [
                80,
                115,
                112,
                97,
                99,
                101,
                119,
                97,
                108,
                107,
                45,
                115,
                116,
                97,
                110,
                100,
                97,
                108,
                111,
                110,
                101,
                80,
                115,
                112,
                97,
                99,
                101,
                119,
                97,
                108,
                107,
                45,
                115,
                116,
                97,
                110,
                100,
                97,
                108,
                111,
                110,
                101,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                60,
                223,
                106,
                203,
                104,
                153,
                7,
                96,
                155,
                4,
                0,
                0,
                0,
                55,
                227,
                151,
                252,
                124,
                145,
                245,
                228,
                1,
                0,
                0,
                0,
                64,
                254,
                58,
                212,
                1,
                248,
                149,
                154,
                6,
                0,
                0,
                0,
                210,
                188,
                152,
                151,
                238,
                208,
                143,
                21,
                3,
                0,
                0,
                0,
                247,
                139,
                39,
                139,
                229,
                63,
                69,
                76,
                2,
                0,
                0,
                0,
                171,
                60,
                5,
                114,
                41,
                31,
                235,
                139,
                1,
                0,
                0,
                0,
                237,
                153,
                197,
                172,
                178,
                94,
                237,
                245,
                3,
                0,
                0,
                0,
                221,
                113,
                141,
                92,
                197,
                50,
                98,
                212,
                1,
                0,
                0,
                0,
                188,
                157,
                137,
                144,
                79,
                91,
                146,
                63,
                1,
                0,
                0,
                0,
                55,
                200,
                187,
                19,
                80,
                169,
                162,
                168,
                3,
                0,
                0,
                0,
                202,
                243,
                155,
                151,
                154,
                104,
                128,
                189,
                1,
                0,
                0,
                0,
                22,
                218,
                150,
                211,
                108,
                109,
                91,
                183,
                1,
                0,
                0,
                0,
                105,
                226,
                225,
                170,
                66,
                31,
                79,
                176,
                1,
                0,
                0,
                0,
                43,
                229,
                203,
                2,
                176,
                165,
                110,
                115,
                1,
                0,
                0,
                0,
                110,
                249,
                83,
                0,
                75,
                163,
                14,
                89,
                1,
                0,
                0,
                0,
                1,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Get the chain's current version."
              ]
            },
            {
              "name": "SS58Prefix",
              "ty": 102,
              "value": [
                42,
                0
              ],
              "docs": [
                " The designated SS58 prefix of this chain.",
                "",
                " This replaces the \"ss58Format\" property declared in the chain spec. Reason is",
                " that the runtime should know about the prefix in order to make use of it as",
                " an identifier of the chain."
              ]
            }
          ],
          "error": {
            "ty": 103
          },
          "index": 0
        },
        {
          "name": "Timestamp",
          "storage": {
            "prefix": "Timestamp",
            "entries": [
              {
                "name": "Now",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Current time for the current block."
                ]
              },
              {
                "name": "DidUpdate",
                "modifier": "Default",
                "ty": {
                  "Plain": 59
                },
                "default": [
                  0
                ],
                "docs": [
                  " Did the timestamp get updated in this block?"
                ]
              }
            ]
          },
          "calls": {
            "ty": 104
          },
          "event": null,
          "constants": [
            {
              "name": "MinimumPeriod",
              "ty": 10,
              "value": [
                184,
                11,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum period between blocks. Beware that this is different to the *expected*",
                " period that the block production apparatus provides. Your chosen consensus system will",
                " generally work with this to determine a sensible block time. e.g. For Aura, it will be",
                " double this period on default settings."
              ]
            }
          ],
          "error": null,
          "index": 1
        },
        {
          "name": "Aura",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [],
          "error": null,
          "index": 2
        },
        {
          "name": "Grandpa",
          "storage": {
            "prefix": "Grandpa",
            "entries": [
              {
                "name": "State",
                "modifier": "Default",
                "ty": {
                  "Plain": 105
                },
                "default": [
                  0
                ],
                "docs": [
                  " State of the current authority set."
                ]
              },
              {
                "name": "PendingChange",
                "modifier": "Optional",
                "ty": {
                  "Plain": 106
                },
                "default": [
                  0
                ],
                "docs": [
                  " Pending change: (signaled at, scheduled change)."
                ]
              },
              {
                "name": "NextForced",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": [
                  " next block number where we can force a change."
                ]
              },
              {
                "name": "Stalled",
                "modifier": "Optional",
                "ty": {
                  "Plain": 84
                },
                "default": [
                  0
                ],
                "docs": [
                  " `true` if we are currently stalled."
                ]
              },
              {
                "name": "CurrentSetId",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The number of changes (both in terms of keys and underlying economic responsibilities)",
                  " in the \"set\" of Grandpa validators from genesis."
                ]
              },
              {
                "name": "SetIdSession",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 10,
                    "value": 4
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " A mapping from grandpa set ID to the index of the *most recent* session for which its",
                  " members were responsible.",
                  "",
                  " This is only used for validating equivocation proofs. An equivocation proof must",
                  " contains a key-ownership proof for a given session, therefore we need a way to tie",
                  " together sessions and GRANDPA set ids, i.e. we need to validate that a validator",
                  " was the owner of a given key on a given session, and what the active set ID was",
                  " during that session.",
                  "",
                  " TWOX-NOTE: `SetId` is not under user control."
                ]
              }
            ]
          },
          "calls": {
            "ty": 109
          },
          "event": {
            "ty": 29
          },
          "constants": [
            {
              "name": "MaxAuthorities",
              "ty": 4,
              "value": [
                32,
                0,
                0,
                0
              ],
              "docs": [
                " Max Authorities in use"
              ]
            },
            {
              "name": "MaxSetIdSessionEntries",
              "ty": 10,
              "value": [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of entries to keep in the set id to session index mapping.",
                "",
                " Since the `SetIdSession` map is only used for validating equivocations this",
                " value should relate to the bonding duration of whatever staking system is",
                " being used (if any). If equivocation handling is not enabled then this value",
                " can be zero."
              ]
            }
          ],
          "error": {
            "ty": 122
          },
          "index": 3
        },
        {
          "name": "Sudo",
          "storage": {
            "prefix": "Sudo",
            "entries": [
              {
                "name": "Key",
                "modifier": "Optional",
                "ty": {
                  "Plain": 0
                },
                "default": [
                  0
                ],
                "docs": [
                  " The `AccountId` of the sudo key."
                ]
              }
            ]
          },
          "calls": {
            "ty": 123
          },
          "event": {
            "ty": 34
          },
          "constants": [],
          "error": {
            "ty": 150
          },
          "index": 4
        },
        {
          "name": "Tokens",
          "storage": {
            "prefix": "Tokens",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Twox64Concat"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total issuance of a token type."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 151,
                    "value": 152
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks of a token type under an account.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Accounts",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 151,
                    "value": 155
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The balance of a token type under an account.",
                  "",
                  " NOTE: If the total is ever zero, decrease account ref account.",
                  "",
                  " NOTE: This is only used in the case that this module is used to store",
                  " balances."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Twox64Concat"
                    ],
                    "key": 151,
                    "value": 156
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 125
          },
          "event": {
            "ty": 38
          },
          "constants": [
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 159
          },
          "index": 5
        },
        {
          "name": "Currencies",
          "storage": {
            "prefix": "Currencies",
            "entries": []
          },
          "calls": {
            "ty": 130
          },
          "event": null,
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 39,
              "value": [
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 160
          },
          "index": 7
        },
        {
          "name": "Balances",
          "storage": {
            "prefix": "Balances",
            "entries": [
              {
                "name": "TotalIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units issued in the system."
                ]
              },
              {
                "name": "InactiveIssuance",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total units of outstanding deactivated balance in the system."
                ]
              },
              {
                "name": "Account",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 5
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The Balances pallet example of storing the balance of an account.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>",
                  "  }",
                  " ```",
                  "",
                  " You can also store the balance of an account in the `System` pallet.",
                  "",
                  " # Example",
                  "",
                  " ```nocompile",
                  "  impl pallet_balances::Config for Runtime {",
                  "   type AccountStore = System",
                  "  }",
                  " ```",
                  "",
                  " But this comes with tradeoffs, storing account balances in the system pallet stores",
                  " `frame_system` data alongside the account data contrary to storing account balances in the",
                  " `Balances` pallet, which uses a `StorageMap` to store balances data only.",
                  " NOTE: This is only used in the case that this pallet is used to store balances."
                ]
              },
              {
                "name": "Locks",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 161
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Any liquidity locks on some account balances.",
                  " NOTE: Should only be accessed when setting, changing and freeing a lock."
                ]
              },
              {
                "name": "Reserves",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 165
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Named reserves on some account balances."
                ]
              }
            ]
          },
          "calls": {
            "ty": 131
          },
          "event": {
            "ty": 44
          },
          "constants": [
            {
              "name": "ExistentialDeposit",
              "ty": 6,
              "value": [
                244,
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The minimum amount required to keep an account open."
              ]
            },
            {
              "name": "MaxLocks",
              "ty": 4,
              "value": [
                50,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of locks that should exist on an account.",
                " Not strictly enforced, but used for weight estimation."
              ]
            },
            {
              "name": "MaxReserves",
              "ty": 4,
              "value": [
                0,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum number of named reserves that can exist on an account."
              ]
            }
          ],
          "error": {
            "ty": 168
          },
          "index": 8
        },
        {
          "name": "TransactionPayment",
          "storage": {
            "prefix": "TransactionPayment",
            "entries": [
              {
                "name": "NextFeeMultiplier",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0,
                  0,
                  100,
                  167,
                  179,
                  182,
                  224,
                  13,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 169
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 45
          },
          "constants": [
            {
              "name": "OperationalFeeMultiplier",
              "ty": 2,
              "value": [
                5
              ],
              "docs": [
                " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their",
                " `priority`",
                "",
                " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later",
                " added to a tip component in regular `priority` calculations.",
                " It means that a `Normal` transaction can front-run a similarly-sized `Operational`",
                " extrinsic (with no tip), by including a tip value greater than the virtual tip.",
                "",
                " ```rust,ignore",
                " // For `Normal`",
                " let priority = priority_calc(tip);",
                "",
                " // For `Operational`",
                " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;",
                " let priority = priority_calc(tip + virtual_tip);",
                " ```",
                "",
                " Note that since we use `final_fee` the multiplier applies also to the regular `tip`",
                " sent with the transaction. So, not only does the transaction get a priority bump based",
                " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`",
                " transactions."
              ]
            }
          ],
          "error": null,
          "index": 9
        },
        {
          "name": "StellarRelay",
          "storage": {
            "prefix": "StellarRelay",
            "entries": [
              {
                "name": "Organizations",
                "modifier": "Default",
                "ty": {
                  "Plain": 170
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Validators",
                "modifier": "Default",
                "ty": {
                  "Plain": 171
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "OldOrganizations",
                "modifier": "Default",
                "ty": {
                  "Plain": 170
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "OldValidators",
                "modifier": "Default",
                "ty": {
                  "Plain": 171
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "NewValidatorsEnactmentBlockHeight",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 132
          },
          "event": {
            "ty": 46
          },
          "constants": [
            {
              "name": "OrganizationLimit",
              "ty": 4,
              "value": [
                255,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "ValidatorLimit",
              "ty": 4,
              "value": [
                255,
                0,
                0,
                0
              ],
              "docs": []
            },
            {
              "name": "IsPublicNetwork",
              "ty": 59,
              "value": [
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 172
          },
          "index": 10
        },
        {
          "name": "VaultRewards",
          "storage": {
            "prefix": "VaultRewards",
            "entries": [
              {
                "name": "TotalStake",
                "modifier": "Default",
                "ty": {
                  "Plain": 50
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total stake deposited to this reward pool."
                ]
              },
              {
                "name": "TotalRewards",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total unclaimed rewards distributed to this reward pool.",
                  " NOTE: this is currently only used for integration tests."
                ]
              },
              {
                "name": "RewardPerToken",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Used to compute the rewards for a participant's stake."
                ]
              },
              {
                "name": "Stake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 48,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The stake of a participant in this reward pool."
                ]
              },
              {
                "name": "RewardTally",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 173,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Accounts for previous changes in stake size."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 47
          },
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 39,
              "value": [
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 174
          },
          "index": 15
        },
        {
          "name": "VaultStaking",
          "storage": {
            "prefix": "VaultStaking",
            "entries": [
              {
                "name": "TotalStake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 175,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total stake - this will increase on deposit and decrease on withdrawal."
                ]
              },
              {
                "name": "TotalCurrentStake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 175,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total stake - this will increase on deposit and decrease on withdrawal or slashing."
                ]
              },
              {
                "name": "TotalRewards",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 176,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The total unclaimed rewards distributed to this reward pool.",
                  " NOTE: this is currently only used for integration tests."
                ]
              },
              {
                "name": "RewardPerToken",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 176,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Used to compute the rewards for a participant's stake."
                ]
              },
              {
                "name": "SlashPerToken",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 175,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Used to compute the amount to slash from a participant's stake."
                ]
              },
              {
                "name": "Stake",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 177,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The stake of a participant in this reward pool."
                ]
              },
              {
                "name": "RewardTally",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 179,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Accounts for previous changes in stake size."
                ]
              },
              {
                "name": "SlashTally",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat",
                      "Blake2_128Concat"
                    ],
                    "key": 177,
                    "value": 50
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Accounts for previous changes in stake size."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 48,
                    "value": 4
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The nonce of the current staking pool, used in force refunds.",
                  " This is a strictly increasing value."
                ]
              }
            ]
          },
          "calls": null,
          "event": {
            "ty": 52
          },
          "constants": [
            {
              "name": "GetNativeCurrencyId",
              "ty": 39,
              "value": [
                0
              ],
              "docs": []
            }
          ],
          "error": {
            "ty": 181
          },
          "index": 16
        },
        {
          "name": "Currency",
          "storage": null,
          "calls": null,
          "event": null,
          "constants": [
            {
              "name": "GetRelayChainCurrencyId",
              "ty": 39,
              "value": [
                1,
                0
              ],
              "docs": [
                " Relay chain currency e.g. DOT/KSM"
              ]
            }
          ],
          "error": {
            "ty": 182
          },
          "index": 17
        },
        {
          "name": "Security",
          "storage": {
            "prefix": "Security",
            "entries": [
              {
                "name": "ParachainStatus",
                "modifier": "Default",
                "ty": {
                  "Plain": 54
                },
                "default": [
                  0
                ],
                "docs": [
                  " Integer/Enum defining the current state of the Spacewalk-Parachain."
                ]
              },
              {
                "name": "Errors",
                "modifier": "Default",
                "ty": {
                  "Plain": 183
                },
                "default": [
                  0
                ],
                "docs": [
                  " Set of ErrorCodes, indicating the reason for an \"Error\" ParachainStatus."
                ]
              },
              {
                "name": "Nonce",
                "modifier": "Default",
                "ty": {
                  "Plain": 184
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Integer increment-only counter, used to prevent collisions when generating identifiers",
                  " for e.g. issue, redeem or replace requests."
                ]
              },
              {
                "name": "ActiveBlockCount",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Like frame_system::block_number, but this one only increments if the parachain status is",
                  " RUNNING. This variable is used to keep track of durations, such as the issue/redeem/replace",
                  " expiry. If the parachain is not RUNNING, no payment proofs can be submitted, and it wouldn't",
                  " be fair to punish the user/vault. By using this variable we ensure that they have sufficient",
                  " time to submit their proof."
                ]
              }
            ]
          },
          "calls": {
            "ty": 138
          },
          "event": {
            "ty": 53
          },
          "constants": [],
          "error": {
            "ty": 186
          },
          "index": 19
        },
        {
          "name": "VaultRegistry",
          "storage": {
            "prefix": "VaultRegistry",
            "entries": [
              {
                "name": "MinimumCollateralVault",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 39,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum collateral (e.g. DOT/KSM) a Vault needs to provide to register."
                ]
              },
              {
                "name": "PunishmentDelay",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " If a Vault fails to execute a correct redeem or replace, it is temporarily banned",
                  " from further issue, redeem or replace requests. This value configures the duration",
                  " of this ban (in number of blocks) ."
                ]
              },
              {
                "name": "SystemCollateralCeiling",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 49,
                    "value": 6
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the over-collateralization rate for collateral locked by Vaults, necessary for",
                  " wrapped tokens. This threshold should be greater than the LiquidationCollateralThreshold."
                ]
              },
              {
                "name": "SecureCollateralThreshold",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 49,
                    "value": 64
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the over-collateralization rate for collateral locked by Vaults, necessary for",
                  " wrapped tokens. This threshold should be greater than the LiquidationCollateralThreshold."
                ]
              },
              {
                "name": "PremiumRedeemThreshold",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 49,
                    "value": 64
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the rate for the collateral rate of Vaults, at which users receive a premium,",
                  " allocated from the Vault's collateral, when performing a redeem with this Vault. This",
                  " threshold should be greater than the LiquidationCollateralThreshold."
                ]
              },
              {
                "name": "LiquidationCollateralThreshold",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 49,
                    "value": 64
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Determines the lower bound for the collateral rate in issued tokens. If a Vault’s",
                  " collateral rate drops below this, automatic liquidation (forced Redeem) is triggered."
                ]
              },
              {
                "name": "LiquidationVault",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 49,
                    "value": 187
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "Vaults",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 48,
                    "value": 188
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of Vaults, using the respective Vault account identifier as key."
                ]
              },
              {
                "name": "VaultStellarPublicKey",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 1
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of Vaults, using the respective Vault account identifier as key."
                ]
              },
              {
                "name": "TotalUserVaultCollateral",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 49,
                    "value": 6
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Total collateral used for collateral tokens issued by active vaults, excluding the",
                  " liquidation vault"
                ]
              }
            ]
          },
          "calls": {
            "ty": 139
          },
          "event": {
            "ty": 57
          },
          "constants": [
            {
              "name": "PalletId",
              "ty": 189,
              "value": [
                109,
                111,
                100,
                47,
                118,
                114,
                101,
                103
              ],
              "docs": [
                " The vault module id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "GetGriefingCollateralCurrencyId",
              "ty": 39,
              "value": [
                1,
                0
              ],
              "docs": [
                " Currency used for griefing collateral, e.g. DOT."
              ]
            }
          ],
          "error": {
            "ty": 190
          },
          "index": 21
        },
        {
          "name": "Oracle",
          "storage": {
            "prefix": "Oracle",
            "entries": [
              {
                "name": "MaxDelay",
                "modifier": "Default",
                "ty": {
                  "Plain": 10
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Maximum delay (milliseconds) for a reported value to be used"
                ]
              },
              {
                "name": "OracleKeys",
                "modifier": "Default",
                "ty": {
                  "Plain": 65
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "StorageVersion",
                "modifier": "Default",
                "ty": {
                  "Plain": 191
                },
                "default": [
                  0
                ],
                "docs": [
                  " Build storage at V1 (requires default 0)."
                ]
              }
            ]
          },
          "calls": {
            "ty": 141
          },
          "event": {
            "ty": 60
          },
          "constants": [],
          "error": {
            "ty": 192
          },
          "index": 22
        },
        {
          "name": "Issue",
          "storage": {
            "prefix": "Issue",
            "entries": [
              {
                "name": "IssueRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 193
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Users create issue requests to issue tokens. This mapping provides access",
                  " from a unique hash `IssueId` to an `IssueRequest` struct."
                ]
              },
              {
                "name": "IssuePeriod",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The time difference in number of blocks between an issue request is created",
                  " and required completion time by a user. The issue period has an upper limit",
                  " to prevent griefing of vault collateral."
                ]
              },
              {
                "name": "IssueMinimumTransferAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of wrapped assets that is required for issue requests"
                ]
              },
              {
                "name": "LimitVolumeAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 67
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "LimitVolumeCurrencyId",
                "modifier": "Default",
                "ty": {
                  "Plain": 39
                },
                "default": [
                  0
                ],
                "docs": [
                  " CurrencyID that represents the currency in which the volume limit is measured, eg DOT, USDC",
                  " or PEN"
                ]
              },
              {
                "name": "CurrentVolumeAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "IntervalLength",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Represent interval define regular 24 hour intervals (every 24 * 3600 / 12 blocks)"
                ]
              },
              {
                "name": "LastIntervalIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Represent current interval current_block_number / IntervalLength"
                ]
              }
            ]
          },
          "calls": {
            "ty": 142
          },
          "event": {
            "ty": 66
          },
          "constants": [],
          "error": {
            "ty": 195
          },
          "index": 23
        },
        {
          "name": "Redeem",
          "storage": {
            "prefix": "Redeem",
            "entries": [
              {
                "name": "RedeemPeriod",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The time difference in number of blocks between a redeem request is created and required",
                  " completion time by a vault. The redeem period has an upper limit to ensure the user gets",
                  " their Stellar assets in time and to potentially punish a vault for inactivity or stealing",
                  " Stellar assets."
                ]
              },
              {
                "name": "RedeemRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 196
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Users create redeem requests to receive stellar assets in return for their previously issued",
                  " tokens. This mapping provides access from a unique hash redeemId to a Redeem struct."
                ]
              },
              {
                "name": "RedeemMinimumTransferAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of wrapped assets that is accepted for redeem requests"
                ]
              },
              {
                "name": "LimitVolumeAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 67
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "LimitVolumeCurrencyId",
                "modifier": "Default",
                "ty": {
                  "Plain": 39
                },
                "default": [
                  0
                ],
                "docs": [
                  " CurrencyID that represents the currency in which the volume limit is measured, eg DOT, USDC",
                  " or PEN"
                ]
              },
              {
                "name": "CurrentVolumeAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": []
              },
              {
                "name": "IntervalLength",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Represent interval define regular 24 hour intervals (every 24 * 3600 / 12 blocks)"
                ]
              },
              {
                "name": "LastIntervalIndex",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Represent current interval current_block_number / IntervalLength"
                ]
              },
              {
                "name": "CancelledRedeemAmount",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 197
                  }
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 143
          },
          "event": {
            "ty": 68
          },
          "constants": [],
          "error": {
            "ty": 198
          },
          "index": 24
        },
        {
          "name": "Replace",
          "storage": {
            "prefix": "Replace",
            "entries": [
              {
                "name": "ReplaceRequests",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 11,
                    "value": 199
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Vaults create replace requests to transfer locked collateral.",
                  " This mapping provides access from a unique hash to a `ReplaceRequest`."
                ]
              },
              {
                "name": "ReplacePeriod",
                "modifier": "Default",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The time difference in number of blocks between when a replace request is created",
                  " and required completion time by a vault. The replace period has an upper limit",
                  " to prevent griefing of vault collateral."
                ]
              },
              {
                "name": "ReplaceMinimumTransferAmount",
                "modifier": "Default",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " The minimum amount of wrapped assets that is accepted for replace requests"
                ]
              }
            ]
          },
          "calls": {
            "ty": 144
          },
          "event": {
            "ty": 70
          },
          "constants": [],
          "error": {
            "ty": 201
          },
          "index": 25
        },
        {
          "name": "Fee",
          "storage": {
            "prefix": "Fee",
            "entries": [
              {
                "name": "IssueFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Issue",
                  " Fee share that users need to pay to issue tokens."
                ]
              },
              {
                "name": "IssueGriefingCollateral",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Default griefing collateral (e.g. DOT/KSM) as a percentage of the locked",
                  " collateral of a Vault a user has to lock to issue tokens."
                ]
              },
              {
                "name": "RedeemFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Redeem",
                  " Fee share that users need to pay to redeem tokens."
                ]
              },
              {
                "name": "PremiumRedeemFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Vault Registry",
                  " If users execute a redeem with a Vault flagged for premium redeem,",
                  " they can earn a collateral premium, slashed from the Vault."
                ]
              },
              {
                "name": "PunishmentFee",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Fee that a Vault has to pay if it fails to execute redeem or replace requests",
                  " (for redeem, on top of the slashed value of the request). The fee is",
                  " paid in collateral based on the token amount at the current exchange rate."
                ]
              },
              {
                "name": "ReplaceGriefingCollateral",
                "modifier": "Default",
                "ty": {
                  "Plain": 64
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " # Replace",
                  " Default griefing collateral (e.g. DOT/KSM) as a percentage of the to-be-locked collateral",
                  " of the new Vault. This collateral will be slashed and allocated to the replacing Vault",
                  " if the to-be-replaced Vault does not transfer the Stellar assets on time."
                ]
              }
            ]
          },
          "calls": {
            "ty": 145
          },
          "event": null,
          "constants": [
            {
              "name": "FeePalletId",
              "ty": 189,
              "value": [
                109,
                111,
                100,
                47,
                102,
                101,
                101,
                115
              ],
              "docs": [
                " The fee module id, used for deriving its sovereign account ID."
              ]
            },
            {
              "name": "MaxExpectedValue",
              "ty": 64,
              "value": [
                0,
                0,
                100,
                167,
                179,
                182,
                224,
                13,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0
              ],
              "docs": [
                " Maximum expected value to set the storage fields to."
              ]
            }
          ],
          "error": {
            "ty": 202
          },
          "index": 26
        },
        {
          "name": "Nomination",
          "storage": {
            "prefix": "Nomination",
            "entries": [
              {
                "name": "NominationEnabled",
                "modifier": "Default",
                "ty": {
                  "Plain": 59
                },
                "default": [
                  0
                ],
                "docs": [
                  " Flag indicating whether this feature is enabled"
                ]
              },
              {
                "name": "Vaults",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 48,
                    "value": 59
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Map of Vaults who have enabled nomination"
                ]
              }
            ]
          },
          "calls": {
            "ty": 146
          },
          "event": {
            "ty": 71
          },
          "constants": [],
          "error": {
            "ty": 203
          },
          "index": 28
        },
        {
          "name": "DiaOracleModule",
          "storage": {
            "prefix": "DiaOracleModule",
            "entries": [
              {
                "name": "AuthorizedAccounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 36
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " List of all authorized accounts"
                ]
              },
              {
                "name": "SupportedCurrencies",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 204,
                    "value": 36
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " List of all supported currencies"
                ]
              },
              {
                "name": "BatchingApi",
                "modifier": "Optional",
                "ty": {
                  "Plain": 12
                },
                "default": [
                  0
                ],
                "docs": []
              },
              {
                "name": "CoinInfosMap",
                "modifier": "Default",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 204,
                    "value": 76
                  }
                },
                "default": [
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0
                ],
                "docs": [
                  " Map of all the coins names to their respective info and price"
                ]
              }
            ]
          },
          "calls": {
            "ty": 147
          },
          "event": {
            "ty": 72
          },
          "constants": [],
          "error": {
            "ty": 205
          },
          "index": 29
        },
        {
          "name": "ClientsInfo",
          "storage": {
            "prefix": "ClientsInfo",
            "entries": [
              {
                "name": "CurrentClientReleases",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 79,
                    "value": 78
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of client name (string literal represented as bytes) to its release details."
                ]
              },
              {
                "name": "PendingClientReleases",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 79,
                    "value": 78
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " Mapping of client name (string literal represented as bytes) to its pending release details."
                ]
              },
              {
                "name": "AuthorizedAccounts",
                "modifier": "Optional",
                "ty": {
                  "Map": {
                    "hashers": [
                      "Blake2_128Concat"
                    ],
                    "key": 0,
                    "value": 36
                  }
                },
                "default": [
                  0
                ],
                "docs": [
                  " List of all authorized accounts"
                ]
              }
            ]
          },
          "calls": {
            "ty": 148
          },
          "event": {
            "ty": 77
          },
          "constants": [
            {
              "name": "MaxNameLength",
              "ty": 4,
              "value": [
                255,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a client name."
              ]
            },
            {
              "name": "MaxUriLength",
              "ty": 4,
              "value": [
                255,
                0,
                0,
                0
              ],
              "docs": [
                " The maximum length of a client URI."
              ]
            }
          ],
          "error": {
            "ty": 206
          },
          "index": 30
        },
        {
          "name": "RewardDistribution",
          "storage": {
            "prefix": "RewardDistribution",
            "entries": [
              {
                "name": "RewardPerBlock",
                "modifier": "Optional",
                "ty": {
                  "Plain": 6
                },
                "default": [
                  0
                ],
                "docs": [
                  " Reward per block."
                ]
              },
              {
                "name": "RewardsAdaptedAt",
                "modifier": "Optional",
                "ty": {
                  "Plain": 4
                },
                "default": [
                  0
                ],
                "docs": []
              }
            ]
          },
          "calls": {
            "ty": 149
          },
          "event": {
            "ty": 80
          },
          "constants": [
            {
              "name": "DecayInterval",
              "ty": 4,
              "value": [
                100,
                0,
                0,
                0
              ],
              "docs": [
                " Defines the interval (in number of blocks) at which the reward per block decays."
              ]
            },
            {
              "name": "DecayRate",
              "ty": 207,
              "value": [
                0,
                0,
                197,
                46,
                188,
                162,
                177,
                0
              ],
              "docs": [
                " Defines the rate at which the reward per block decays."
              ]
            }
          ],
          "error": {
            "ty": 208
          },
          "index": 31
        }
      ],
      "extrinsic": {
        "ty": 209,
        "version": 4,
        "signed_extensions": [
          {
            "identifier": "CheckSpecVersion",
            "ty": 215,
            "additional_signed": 4
          },
          {
            "identifier": "CheckTxVersion",
            "ty": 216,
            "additional_signed": 4
          },
          {
            "identifier": "CheckGenesis",
            "ty": 217,
            "additional_signed": 11
          },
          {
            "identifier": "CheckMortality",
            "ty": 218,
            "additional_signed": 11
          },
          {
            "identifier": "CheckNonce",
            "ty": 220,
            "additional_signed": 36
          },
          {
            "identifier": "CheckWeight",
            "ty": 221,
            "additional_signed": 36
          },
          {
            "identifier": "ChargeTransactionPayment",
            "ty": 222,
            "additional_signed": 36
          }
        ]
      },
      "ty": 223
    }
  }
]

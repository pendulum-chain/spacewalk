
//! Autogenerated weights for issue
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-18, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `MacBook-Pro`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/spacewalk-standalone
// benchmark
// pallet
// --chain=dev
// --pallet=issue
// --extrinsic=*
// --steps=100
// --repeat=10
// --wasm-execution=compiled
// --output=pallets/issue/src/default_weights.rs
// --template=.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for issue.
pub trait WeightInfo {
	fn request_issue() -> Weight;
	fn execute_issue() -> Weight;
	fn cancel_issue() -> Weight;
	fn set_issue_period() -> Weight;
	fn rate_limit_update() -> Weight;
}

/// Weights for issue using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Oracle Aggregate (r:2 w:0)
	// Storage: Fee IssueGriefingCollateral (r:1 w:0)
	// Storage: Issue IssueMinimumTransferAmount (r:1 w:0)
	// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	// Storage: VaultStaking Nonce (r:1 w:0)
	// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	// Storage: Fee IssueFee (r:1 w:0)
	// Storage: Security Nonce (r:1 w:1)
	// Storage: System ParentHash (r:1 w:0)
	// Storage: VaultRegistry VaultStellarPublicKey (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: Issue IssuePeriod (r:1 w:0)
	// Storage: Issue IssueRequests (r:0 w:1)
	fn request_issue() -> Weight {
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(50_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(15_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	// Storage: Issue IssueRequests (r:1 w:1)
	// Storage: StellarRelay IsPublicNetwork (r:1 w:0)
	// Storage: StellarRelay Validators (r:1 w:0)
	// Storage: StellarRelay Organizations (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Fee IssueFee (r:1 w:0)
	// Storage: VaultRewards Stake (r:1 w:0)
	// Storage: VaultRewards TotalStake (r:1 w:0)
	fn execute_issue() -> Weight {
		// Minimum execution time: 4_078_000 nanoseconds.
		Weight::from_ref_time(4_104_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Issue IssueRequests (r:1 w:1)
	// Storage: Issue IssuePeriod (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	fn cancel_issue() -> Weight {
		// Minimum execution time: 24_000 nanoseconds.
		Weight::from_ref_time(25_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	// Storage: Issue IssuePeriod (r:0 w:1)
	fn set_issue_period() -> Weight {
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_000_000_u64)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	fn rate_limit_update() -> Weight{
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_000_000_u64)
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Oracle Aggregate (r:2 w:0)
	// Storage: Fee IssueGriefingCollateral (r:1 w:0)
	// Storage: Issue IssueMinimumTransferAmount (r:1 w:0)
	// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	// Storage: VaultStaking Nonce (r:1 w:0)
	// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	// Storage: Fee IssueFee (r:1 w:0)
	// Storage: Security Nonce (r:1 w:1)
	// Storage: System ParentHash (r:1 w:0)
	// Storage: VaultRegistry VaultStellarPublicKey (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: Issue IssuePeriod (r:1 w:0)
	// Storage: Issue IssueRequests (r:0 w:1)
	// Storage: Redeem LimitVolumeAmount (r:1 w:0)
	// Storage: Redeem IntervalLength (r:1 w:0)
	// Storage: Redeem LastIntervalIndex (r:1 w:0)
	// Storage: Redeem CurrentVolumeAmount (r:1 w:0)
	fn request_issue() -> Weight {
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(50_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(19_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: Issue IssueRequests (r:1 w:1)
	// Storage: StellarRelay IsPublicNetwork (r:1 w:0)
	// Storage: StellarRelay Validators (r:1 w:0)
	// Storage: StellarRelay Organizations (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Fee IssueFee (r:1 w:0)
	// Storage: VaultRewards Stake (r:1 w:0)
	// Storage: VaultRewards TotalStake (r:1 w:0)
	// Storage: Redeem LimitVolumeAmount (r:1 w:0)
	// Storage: Redeem CurrentVolumeAmount (r:1 w:1)
	// Storage: Security ParachainStatus (r:2 w0)
	// Storage: Oracle Aggregate (r:2 w0)
	fn execute_issue() -> Weight {
		// Minimum execution time: 4_078_000 nanoseconds.
		Weight::from_ref_time(4_104_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	// Storage: Issue IssueRequests (r:1 w:1)
	// Storage: Issue IssuePeriod (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	fn cancel_issue() -> Weight {
		// Minimum execution time: 24_000 nanoseconds.
		Weight::from_ref_time(25_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	// Storage: Issue IssuePeriod (r:0 w:1)
	fn set_issue_period() -> Weight {
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_000_000_u64)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}

	fn rate_limit_update() -> Weight{
		// Minimum execution time: 7_000 nanoseconds.
		Weight::from_ref_time(8_000_000_u64)
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
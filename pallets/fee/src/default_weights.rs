
//! Autogenerated weights for `fee`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-24, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bs-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/spacewalk-standalone
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// *
// --extrinsic
// *
// --steps=100
// --repeat=10
// --output
// pallets

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `fee`.
pub trait WeightInfo {
	fn withdraw_rewards() -> Weight;
	fn set_issue_fee() -> Weight;
	fn set_issue_griefing_collateral() -> Weight;
	fn set_redeem_fee() -> Weight;
	fn set_premium_redeem_fee() -> Weight;
	fn set_punishment_fee() -> Weight;
	fn set_replace_griefing_collateral() -> Weight;
}

pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: VaultRewards Stake (r:1 w:0)
	/// Proof Skipped: VaultRewards Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards RewardPerToken (r:1 w:0)
	/// Proof Skipped: VaultRewards RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards RewardTally (r:1 w:1)
	/// Proof Skipped: VaultRewards RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRewards TotalRewards (r:1 w:1)
	/// Proof Skipped: VaultRewards TotalRewards (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Stake (r:1 w:1)
	/// Proof Skipped: VaultStaking Stake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking SlashPerToken (r:1 w:0)
	/// Proof Skipped: VaultStaking SlashPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking SlashTally (r:1 w:1)
	/// Proof Skipped: VaultStaking SlashTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalStake (r:1 w:1)
	/// Proof Skipped: VaultStaking TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardPerToken (r:1 w:0)
	/// Proof Skipped: VaultStaking RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardTally (r:1 w:1)
	/// Proof Skipped: VaultStaking RewardTally (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalRewards (r:1 w:1)
	/// Proof Skipped: VaultStaking TotalRewards (max_values: None, max_size: None, mode: Measured)
	fn withdraw_rewards() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `118`
		//  Estimated: `46579`
		// Minimum execution time: 135_000_000 picoseconds.
		Weight::from_parts(139_000_000, 0)
			.saturating_add(Weight::from_parts(0, 46579))
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Fee IssueFee (r:0 w:1)
	/// Proof Skipped: Fee IssueFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_issue_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Fee IssueGriefingCollateral (r:0 w:1)
	/// Proof Skipped: Fee IssueGriefingCollateral (max_values: Some(1), max_size: None, mode: Measured)
	fn set_issue_griefing_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Fee RedeemFee (r:0 w:1)
	/// Proof Skipped: Fee RedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_redeem_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Fee PremiumRedeemFee (r:0 w:1)
	/// Proof Skipped: Fee PremiumRedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_premium_redeem_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Fee PunishmentFee (r:0 w:1)
	/// Proof Skipped: Fee PunishmentFee (max_values: Some(1), max_size: None, mode: Measured)
	fn set_punishment_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Fee ReplaceGriefingCollateral (r:0 w:1)
	/// Proof Skipped: Fee ReplaceGriefingCollateral (max_values: Some(1), max_size: None, mode: Measured)
	fn set_replace_griefing_collateral() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

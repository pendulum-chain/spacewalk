
//! Autogenerated weights for redeem
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-13, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bogdans-M2-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/spacewalk-standalone
// benchmark
// pallet
// --chain=dev
// --pallet=redeem
// --extrinsic=*
// --steps=100
// --repeat=10
// --wasm-execution=compiled
// --output=pallets/redeem/src/default_weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for redeem.
pub trait WeightInfo {
	fn request_redeem() -> Weight;
	fn liquidation_redeem() -> Weight;
	fn execute_redeem() -> Weight;
	fn cancel_redeem_reimburse() -> Weight;
	fn cancel_redeem_retry() -> Weight;
	fn self_redeem() -> Weight;
	fn set_redeem_period() -> Weight;
	fn mint_tokens_for_reimbursed_redeem() -> Weight;
	fn rate_limit_update() -> Weight;
	fn minimum_transfer_amount_update() -> Weight;
}

/// Weights for redeem using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Redeem LimitVolumeAmount (r:1 w:0)
	/// Proof: Redeem LimitVolumeAmount (max_values: Some(1), max_size: Some(17), added: 512, mode: MaxEncodedLen)
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(150), added: 2625, mode: MaxEncodedLen)
	/// Storage: Fee RedeemFee (r:1 w:0)
	/// Proof Skipped: Fee RedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Redeem RedeemMinimumTransferAmount (r:1 w:0)
	/// Proof: Redeem RedeemMinimumTransferAmount (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Security Nonce (r:1 w:1)
	/// Proof Skipped: Security Nonce (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System ParentHash (r:1 w:0)
	/// Proof: System ParentHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: VaultRegistry PremiumRedeemThreshold (r:1 w:0)
	/// Proof Skipped: VaultRegistry PremiumRedeemThreshold (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: Fee PremiumRedeemFee (r:1 w:0)
	/// Proof Skipped: Fee PremiumRedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Security ActiveBlockCount (r:1 w:0)
	/// Proof Skipped: Security ActiveBlockCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemPeriod (r:1 w:0)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Redeem RedeemRequests (r:0 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	fn request_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1790`
		//  Estimated: `47019`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 47019)
			.saturating_add(T::DbWeight::get().reads(14_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(150), added: 2625, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: VaultRegistry LiquidationVault (r:1 w:1)
	/// Proof Skipped: VaultRegistry LiquidationVault (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	/// Proof Skipped: VaultRegistry TotalUserVaultCollateral (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn liquidation_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1574`
		//  Estimated: `28674`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(57_000_000, 28674)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: StellarRelay NewValidatorsEnactmentBlockHeight (r:1 w:0)
	/// Proof: StellarRelay NewValidatorsEnactmentBlockHeight (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: StellarRelay Validators (r:1 w:0)
	/// Proof: StellarRelay Validators (max_values: Some(1), max_size: Some(70382), added: 70877, mode: MaxEncodedLen)
	/// Storage: StellarRelay Organizations (r:1 w:0)
	/// Proof: StellarRelay Organizations (max_values: Some(1), max_size: Some(37232), added: 37727, mode: MaxEncodedLen)
	/// Storage: Redeem LimitVolumeAmount (r:1 w:0)
	/// Proof: Redeem LimitVolumeAmount (max_values: Some(1), max_size: Some(17), added: 512, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalStake (r:1 w:0)
	/// Proof: VaultRewards TotalStake (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	fn execute_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654`
		//  Estimated: `126058`
		// Minimum execution time: 3_732_000_000 picoseconds.
		Weight::from_parts(3_742_000_000, 126058)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: Redeem RedeemPeriod (r:1 w:0)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Security ActiveBlockCount (r:1 w:0)
	/// Proof Skipped: Security ActiveBlockCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Fee PunishmentFee (r:1 w:0)
	/// Proof Skipped: Fee PunishmentFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	/// Proof Skipped: VaultRegistry TotalUserVaultCollateral (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardCurrencies (r:1 w:0)
	/// Proof Skipped: VaultStaking RewardCurrencies (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRewards Stake (r:1 w:0)
	/// Proof: VaultRewards Stake (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardPerToken (r:1 w:0)
	/// Proof: VaultRewards RewardPerToken (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardTally (r:1 w:1)
	/// Proof: VaultRewards RewardTally (max_values: None, max_size: Some(264), added: 2739, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalRewards (r:1 w:1)
	/// Proof: VaultRewards TotalRewards (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultStaking RewardPerToken (r:1 w:1)
	/// Proof Skipped: VaultStaking RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	/// Proof Skipped: VaultRegistry PunishmentDelay (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRewards TotalStake (r:2 w:0)
	/// Proof: VaultRewards TotalStake (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	/// Proof Skipped: VaultRegistry SecureCollateralThreshold (max_values: None, max_size: None, mode: Measured)
	/// Storage: Redeem CancelledRedeemAmount (r:0 w:1)
	/// Proof: Redeem CancelledRedeemAmount (max_values: None, max_size: Some(110), added: 2585, mode: MaxEncodedLen)
	fn cancel_redeem_reimburse() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2551`
		//  Estimated: `88242`
		// Minimum execution time: 86_000_000 picoseconds.
		Weight::from_parts(88_000_000, 88242)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: Redeem RedeemPeriod (r:1 w:0)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Security ActiveBlockCount (r:1 w:0)
	/// Proof Skipped: Security ActiveBlockCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Fee PunishmentFee (r:1 w:0)
	/// Proof Skipped: Fee PunishmentFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	/// Proof Skipped: VaultRegistry TotalUserVaultCollateral (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardCurrencies (r:1 w:0)
	/// Proof Skipped: VaultStaking RewardCurrencies (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRewards Stake (r:1 w:0)
	/// Proof: VaultRewards Stake (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardPerToken (r:1 w:0)
	/// Proof: VaultRewards RewardPerToken (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardTally (r:1 w:1)
	/// Proof: VaultRewards RewardTally (max_values: None, max_size: Some(264), added: 2739, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalRewards (r:1 w:1)
	/// Proof: VaultRewards TotalRewards (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultStaking RewardPerToken (r:1 w:1)
	/// Proof Skipped: VaultStaking RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	/// Proof Skipped: VaultRegistry PunishmentDelay (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem CancelledRedeemAmount (r:0 w:1)
	/// Proof: Redeem CancelledRedeemAmount (max_values: None, max_size: Some(110), added: 2585, mode: MaxEncodedLen)
	fn cancel_redeem_retry() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2372`
		//  Estimated: `74161`
		// Minimum execution time: 72_000_000 picoseconds.
		Weight::from_parts(73_000_000, 74161)
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(150), added: 2625, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalStake (r:2 w:0)
	/// Proof: VaultRewards TotalStake (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	fn self_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1745`
		//  Estimated: `21686`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(45_000_000, 21686)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Redeem RedeemPeriod (r:0 w:1)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_redeem_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: Redeem CancelledRedeemAmount (r:1 w:1)
	/// Proof: Redeem CancelledRedeemAmount (max_values: None, max_size: Some(110), added: 2585, mode: MaxEncodedLen)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	/// Proof Skipped: VaultRegistry SecureCollateralThreshold (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	fn mint_tokens_for_reimbursed_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1733`
		//  Estimated: `31406`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 31406)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Redeem LimitVolumeAmount (r:0 w:1)
	/// Proof: Redeem LimitVolumeAmount (max_values: Some(1), max_size: Some(17), added: 512, mode: MaxEncodedLen)
	/// Storage: Redeem LimitVolumeCurrencyId (r:0 w:1)
	/// Proof: Redeem LimitVolumeCurrencyId (max_values: Some(1), max_size: Some(46), added: 541, mode: MaxEncodedLen)
	/// Storage: Redeem IntervalLength (r:0 w:1)
	/// Proof: Redeem IntervalLength (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn rate_limit_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Redeem RedeemMinimumTransferAmount (r:0 w:1)
	/// Proof: Redeem RedeemMinimumTransferAmount (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn minimum_transfer_amount_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Redeem LimitVolumeAmount (r:1 w:0)
	/// Proof: Redeem LimitVolumeAmount (max_values: Some(1), max_size: Some(17), added: 512, mode: MaxEncodedLen)
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(150), added: 2625, mode: MaxEncodedLen)
	/// Storage: Fee RedeemFee (r:1 w:0)
	/// Proof Skipped: Fee RedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Redeem RedeemMinimumTransferAmount (r:1 w:0)
	/// Proof: Redeem RedeemMinimumTransferAmount (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Security Nonce (r:1 w:1)
	/// Proof Skipped: Security Nonce (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: System ParentHash (r:1 w:0)
	/// Proof: System ParentHash (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: VaultRegistry PremiumRedeemThreshold (r:1 w:0)
	/// Proof Skipped: VaultRegistry PremiumRedeemThreshold (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: Fee PremiumRedeemFee (r:1 w:0)
	/// Proof Skipped: Fee PremiumRedeemFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Security ActiveBlockCount (r:1 w:0)
	/// Proof Skipped: Security ActiveBlockCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemPeriod (r:1 w:0)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Redeem RedeemRequests (r:0 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	fn request_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1790`
		//  Estimated: `47019`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(55_000_000, 47019)
			.saturating_add(RocksDbWeight::get().reads(14_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(150), added: 2625, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: VaultRegistry LiquidationVault (r:1 w:1)
	/// Proof Skipped: VaultRegistry LiquidationVault (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	/// Proof Skipped: VaultRegistry TotalUserVaultCollateral (max_values: None, max_size: None, mode: Measured)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn liquidation_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1574`
		//  Estimated: `28674`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(57_000_000, 28674)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: StellarRelay NewValidatorsEnactmentBlockHeight (r:1 w:0)
	/// Proof: StellarRelay NewValidatorsEnactmentBlockHeight (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: StellarRelay Validators (r:1 w:0)
	/// Proof: StellarRelay Validators (max_values: Some(1), max_size: Some(70382), added: 70877, mode: MaxEncodedLen)
	/// Storage: StellarRelay Organizations (r:1 w:0)
	/// Proof: StellarRelay Organizations (max_values: Some(1), max_size: Some(37232), added: 37727, mode: MaxEncodedLen)
	/// Storage: Redeem LimitVolumeAmount (r:1 w:0)
	/// Proof: Redeem LimitVolumeAmount (max_values: Some(1), max_size: Some(17), added: 512, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalStake (r:1 w:0)
	/// Proof: VaultRewards TotalStake (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	fn execute_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1654`
		//  Estimated: `126058`
		// Minimum execution time: 3_732_000_000 picoseconds.
		Weight::from_parts(3_742_000_000, 126058)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: Redeem RedeemPeriod (r:1 w:0)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Security ActiveBlockCount (r:1 w:0)
	/// Proof Skipped: Security ActiveBlockCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Fee PunishmentFee (r:1 w:0)
	/// Proof Skipped: Fee PunishmentFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	/// Proof Skipped: VaultRegistry TotalUserVaultCollateral (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardCurrencies (r:1 w:0)
	/// Proof Skipped: VaultStaking RewardCurrencies (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRewards Stake (r:1 w:0)
	/// Proof: VaultRewards Stake (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardPerToken (r:1 w:0)
	/// Proof: VaultRewards RewardPerToken (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardTally (r:1 w:1)
	/// Proof: VaultRewards RewardTally (max_values: None, max_size: Some(264), added: 2739, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalRewards (r:1 w:1)
	/// Proof: VaultRewards TotalRewards (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultStaking RewardPerToken (r:1 w:1)
	/// Proof Skipped: VaultStaking RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	/// Proof Skipped: VaultRegistry PunishmentDelay (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRewards TotalStake (r:2 w:0)
	/// Proof: VaultRewards TotalStake (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	/// Proof Skipped: VaultRegistry SecureCollateralThreshold (max_values: None, max_size: None, mode: Measured)
	/// Storage: Redeem CancelledRedeemAmount (r:0 w:1)
	/// Proof: Redeem CancelledRedeemAmount (max_values: None, max_size: Some(110), added: 2585, mode: MaxEncodedLen)
	fn cancel_redeem_reimburse() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2551`
		//  Estimated: `88242`
		// Minimum execution time: 86_000_000 picoseconds.
		Weight::from_parts(88_000_000, 88242)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: Redeem RedeemPeriod (r:1 w:0)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Security ActiveBlockCount (r:1 w:0)
	/// Proof Skipped: Security ActiveBlockCount (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Fee PunishmentFee (r:1 w:0)
	/// Proof Skipped: Fee PunishmentFee (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	/// Proof Skipped: VaultRegistry TotalUserVaultCollateral (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking RewardCurrencies (r:1 w:0)
	/// Proof Skipped: VaultStaking RewardCurrencies (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: VaultRewards Stake (r:1 w:0)
	/// Proof: VaultRewards Stake (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardPerToken (r:1 w:0)
	/// Proof: VaultRewards RewardPerToken (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: VaultRewards RewardTally (r:1 w:1)
	/// Proof: VaultRewards RewardTally (max_values: None, max_size: Some(264), added: 2739, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalRewards (r:1 w:1)
	/// Proof: VaultRewards TotalRewards (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: VaultStaking RewardPerToken (r:1 w:1)
	/// Proof Skipped: VaultStaking RewardPerToken (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalStake (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	/// Proof Skipped: VaultRegistry PunishmentDelay (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem CancelledRedeemAmount (r:0 w:1)
	/// Proof: Redeem CancelledRedeemAmount (max_values: None, max_size: Some(110), added: 2585, mode: MaxEncodedLen)
	fn cancel_redeem_retry() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2372`
		//  Estimated: `74161`
		// Minimum execution time: 72_000_000 picoseconds.
		Weight::from_parts(73_000_000, 74161)
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(150), added: 2625, mode: MaxEncodedLen)
	/// Storage: Tokens TotalIssuance (r:1 w:1)
	/// Proof: Tokens TotalIssuance (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalStake (r:2 w:0)
	/// Proof: VaultRewards TotalStake (max_values: None, max_size: Some(78), added: 2553, mode: MaxEncodedLen)
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	fn self_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1745`
		//  Estimated: `21686`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(45_000_000, 21686)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Redeem RedeemPeriod (r:0 w:1)
	/// Proof: Redeem RedeemPeriod (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn set_redeem_period() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Security ParachainStatus (r:1 w:0)
	/// Proof Skipped: Security ParachainStatus (max_values: Some(1), max_size: None, mode: Measured)
	/// Storage: Redeem RedeemRequests (r:1 w:1)
	/// Proof: Redeem RedeemRequests (max_values: None, max_size: Some(356), added: 2831, mode: MaxEncodedLen)
	/// Storage: Redeem CancelledRedeemAmount (r:1 w:1)
	/// Proof: Redeem CancelledRedeemAmount (max_values: None, max_size: Some(110), added: 2585, mode: MaxEncodedLen)
	/// Storage: VaultRegistry Vaults (r:1 w:1)
	/// Proof Skipped: VaultRegistry Vaults (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	/// Proof Skipped: VaultRegistry SecureCollateralThreshold (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking Nonce (r:1 w:0)
	/// Proof Skipped: VaultStaking Nonce (max_values: None, max_size: None, mode: Measured)
	/// Storage: VaultStaking TotalCurrentStake (r:1 w:0)
	/// Proof Skipped: VaultStaking TotalCurrentStake (max_values: None, max_size: None, mode: Measured)
	fn mint_tokens_for_reimbursed_redeem() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1733`
		//  Estimated: `31406`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 31406)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Redeem LimitVolumeAmount (r:0 w:1)
	/// Proof: Redeem LimitVolumeAmount (max_values: Some(1), max_size: Some(17), added: 512, mode: MaxEncodedLen)
	/// Storage: Redeem LimitVolumeCurrencyId (r:0 w:1)
	/// Proof: Redeem LimitVolumeCurrencyId (max_values: Some(1), max_size: Some(46), added: 541, mode: MaxEncodedLen)
	/// Storage: Redeem IntervalLength (r:0 w:1)
	/// Proof: Redeem IntervalLength (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	fn rate_limit_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_000_000 picoseconds.
		Weight::from_parts(5_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Redeem RedeemMinimumTransferAmount (r:0 w:1)
	/// Proof: Redeem RedeemMinimumTransferAmount (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	fn minimum_transfer_amount_update() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_000_000 picoseconds.
		Weight::from_parts(4_000_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
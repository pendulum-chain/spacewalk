
//! Autogenerated weights for clients_info
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-06, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `enterprise`, CPU: `Intel(R) Core(TM) i7-9700K CPU @ 3.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// clients_info
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 100
// --repeat
// 10
// --output
// clients_info_default_weights.rs
// --template
// .deploy/weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for clients_info.
pub trait WeightInfo {
	fn set_current_client_release(n: u32, u: u32, ) -> Weight;
	fn set_pending_client_release(n: u32, u: u32, ) -> Weight;
}

/// Weights for clients_info using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: ClientsInfo CurrentClientReleases (r:0 w:1)
	/// Proof: ClientsInfo CurrentClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_current_client_release(n: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1021`
		//  Estimated: `0`
		// Minimum execution time: 25_064_000 picoseconds.
		Weight::from_parts(64_914_089, 0)
			// Standard Error: 15_804
			.saturating_add(Weight::from_parts(212_453, 0).saturating_mul(n.into()))
			// Standard Error: 15_804
			.saturating_add(Weight::from_parts(11_334, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo PendingClientReleases (r:0 w:1)
	/// Proof: ClientsInfo PendingClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_pending_client_release(_n: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1021`
		//  Estimated: `0`
		// Minimum execution time: 37_018_000 picoseconds.
		Weight::from_parts(81_367_364, 0)
			// Standard Error: 13_568
			.saturating_add(Weight::from_parts(254_735, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: ClientsInfo CurrentClientReleases (r:0 w:1)
	/// Proof: ClientsInfo CurrentClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_current_client_release(n: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1021`
		//  Estimated: `0`
		// Minimum execution time: 25_064_000 picoseconds.
		Weight::from_parts(64_914_089, 0)
			// Standard Error: 15_804
			.saturating_add(Weight::from_parts(212_453, 0).saturating_mul(n.into()))
			// Standard Error: 15_804
			.saturating_add(Weight::from_parts(11_334, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo PendingClientReleases (r:0 w:1)
	/// Proof: ClientsInfo PendingClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_pending_client_release(_n: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1021`
		//  Estimated: `0`
		// Minimum execution time: 37_018_000 picoseconds.
		Weight::from_parts(81_367_364, 0)
			// Standard Error: 13_568
			.saturating_add(Weight::from_parts(254_735, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
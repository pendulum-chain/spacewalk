
//! Autogenerated weights for clients_info
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-13, STEPS: `100`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Bogdans-M2-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/spacewalk-standalone
// benchmark
// pallet
// --chain=dev
// --pallet=clients-info
// --extrinsic=*
// --steps=100
// --repeat=10
// --wasm-execution=compiled
// --output=pallets/clients-info/src/default_weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for clients_info.
pub trait WeightInfo {
	fn set_current_client_release(n: u32, u: u32, ) -> Weight;
	fn set_pending_client_release(n: u32, u: u32, ) -> Weight;
	fn authorize_account() -> Weight;
	fn deauthorize_account() -> Weight;
}

/// Weights for clients_info using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: ClientsInfo AuthorizedAccounts (r:1 w:0)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ClientsInfo CurrentClientReleases (r:0 w:1)
	/// Proof: ClientsInfo CurrentClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_current_client_release(n: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `3513`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_950_970, 3513)
			// Standard Error: 263
			.saturating_add(Weight::from_parts(2_405, 0).saturating_mul(n.into()))
			// Standard Error: 263
			.saturating_add(Weight::from_parts(112, 0).saturating_mul(u.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo AuthorizedAccounts (r:1 w:0)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ClientsInfo PendingClientReleases (r:0 w:1)
	/// Proof: ClientsInfo PendingClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_pending_client_release(n: u32, _u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `3513`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_119_191, 3513)
			// Standard Error: 208
			.saturating_add(Weight::from_parts(1_518, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo AuthorizedAccounts (r:2 w:1)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn authorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `6036`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 6036)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo AuthorizedAccounts (r:2 w:1)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn deauthorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `134`
		//  Estimated: `6036`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 6036)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: ClientsInfo AuthorizedAccounts (r:1 w:0)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ClientsInfo CurrentClientReleases (r:0 w:1)
	/// Proof: ClientsInfo CurrentClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_current_client_release(n: u32, u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `3513`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(7_950_970, 3513)
			// Standard Error: 263
			.saturating_add(Weight::from_parts(2_405, 0).saturating_mul(n.into()))
			// Standard Error: 263
			.saturating_add(Weight::from_parts(112, 0).saturating_mul(u.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo AuthorizedAccounts (r:1 w:0)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: ClientsInfo PendingClientReleases (r:0 w:1)
	/// Proof: ClientsInfo PendingClientReleases (max_values: None, max_size: Some(562), added: 3037, mode: MaxEncodedLen)
	/// The range of component `n` is `[0, 255]`.
	/// The range of component `u` is `[0, 255]`.
	fn set_pending_client_release(n: u32, _u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `3513`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_119_191, 3513)
			// Standard Error: 208
			.saturating_add(Weight::from_parts(1_518, 0).saturating_mul(n.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo AuthorizedAccounts (r:2 w:1)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn authorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `77`
		//  Estimated: `6036`
		// Minimum execution time: 7_000_000 picoseconds.
		Weight::from_parts(8_000_000, 6036)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: ClientsInfo AuthorizedAccounts (r:2 w:1)
	/// Proof: ClientsInfo AuthorizedAccounts (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	fn deauthorize_account() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `134`
		//  Estimated: `6036`
		// Minimum execution time: 9_000_000 picoseconds.
		Weight::from_parts(10_000_000, 6036)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
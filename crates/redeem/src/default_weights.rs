//! Autogenerated weights for redeem
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2021-09-13, STEPS: `100`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// target/release/interbtc-standalone
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// redeem
// --extrinsic
// *
// --steps
// 100
// --repeat
// 10
// --output
// crates/redeem/src/default_weights.rs
// --template
// .deploy/weight-template.hbs


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for redeem.
pub trait WeightInfo {
	fn request_redeem() -> Weight;
	fn liquidation_redeem() -> Weight;
	fn execute_redeem() -> Weight;
	fn cancel_redeem_reimburse() -> Weight;
	fn cancel_redeem_retry() -> Weight;
	fn set_redeem_period() -> Weight;
}

/// Weights for redeem using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Fee RedeemFee (r:1 w:0)
	// Storage: Redeem RedeemTransactionSize (r:1 w:0)
	// Storage: Oracle Aggregate (r:2 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Redeem RedeemBtcDustValue (r:1 w:0)
	// Storage: Security Nonce (r:1 w:1)
	// Storage: System ParentHash (r:1 w:0)
	// Storage: VaultRegistry PremiumRedeemThreshold (r:1 w:0)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: Fee PremiumRedeemFee (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: Redeem RedeemPeriod (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:0 w:1)
	fn request_redeem() -> Weight {
		(169_144_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(17 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VaultRegistry LiquidationVault (r:1 w:1)
	// Storage: VaultRegistry LiquidationVaultAccountId (r:1 w:0)
	// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	// Storage: System Account (r:2 w:1)
	fn liquidation_redeem() -> Weight {
		(156_453_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(10 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:1 w:1)
	// Storage: BTCRelay DisableInclusionCheck (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: BTCRelay Chains (r:1 w:0)
	// Storage: BTCRelay BlockHeaders (r:1 w:0)
	// Storage: BTCRelay StableBitcoinConfirmations (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: BTCRelay StableParachainConfirmations (r:1 w:0)
	// Storage: Rewards TotalStake (r:1 w:1)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Rewards Stake (r:1 w:1)
	// Storage: Rewards RewardTally (r:1 w:1)
	// Storage: Rewards RewardPerToken (r:1 w:0)
	fn execute_redeem() -> Weight {
		(163_039_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:1 w:1)
	// Storage: Redeem RedeemPeriod (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Oracle Aggregate (r:1 w:0)
	// Storage: Fee PunishmentFee (r:1 w:0)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	// Storage: Staking TotalStake (r:1 w:0)
	// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	// Storage: Rewards TotalStake (r:1 w:0)
	// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	fn cancel_redeem_reimburse() -> Weight {
		(208_908_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(15 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:1 w:1)
	// Storage: Redeem RedeemPeriod (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Oracle Aggregate (r:1 w:0)
	// Storage: Fee PunishmentFee (r:1 w:0)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	// Storage: Staking TotalStake (r:1 w:0)
	// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	fn cancel_redeem_retry() -> Weight {
		(164_398_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(13 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: Redeem RedeemPeriod (r:0 w:1)
	fn set_redeem_period() -> Weight {
		(3_288_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Fee RedeemFee (r:1 w:0)
	// Storage: Redeem RedeemTransactionSize (r:1 w:0)
	// Storage: Oracle Aggregate (r:2 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Redeem RedeemBtcDustValue (r:1 w:0)
	// Storage: Security Nonce (r:1 w:1)
	// Storage: System ParentHash (r:1 w:0)
	// Storage: VaultRegistry PremiumRedeemThreshold (r:1 w:0)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: Fee PremiumRedeemFee (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: Redeem RedeemPeriod (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:0 w:1)
	fn request_redeem() -> Weight {
		(169_144_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(17 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: Tokens TotalIssuance (r:1 w:1)
	// Storage: VaultRegistry LiquidationVault (r:1 w:1)
	// Storage: VaultRegistry LiquidationVaultAccountId (r:1 w:0)
	// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	// Storage: System Account (r:2 w:1)
	fn liquidation_redeem() -> Weight {
		(156_453_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(10 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:1 w:1)
	// Storage: BTCRelay DisableInclusionCheck (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: BTCRelay Chains (r:1 w:0)
	// Storage: BTCRelay BlockHeaders (r:1 w:0)
	// Storage: BTCRelay StableBitcoinConfirmations (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: BTCRelay StableParachainConfirmations (r:1 w:0)
	// Storage: Rewards TotalStake (r:1 w:1)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Rewards Stake (r:1 w:1)
	// Storage: Rewards RewardTally (r:1 w:1)
	// Storage: Rewards RewardPerToken (r:1 w:0)
	fn execute_redeem() -> Weight {
		(163_039_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:1 w:1)
	// Storage: Redeem RedeemPeriod (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Oracle Aggregate (r:1 w:0)
	// Storage: Fee PunishmentFee (r:1 w:0)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	// Storage: Staking TotalStake (r:1 w:0)
	// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	// Storage: Rewards TotalStake (r:1 w:0)
	// Storage: VaultRegistry SecureCollateralThreshold (r:1 w:0)
	fn cancel_redeem_reimburse() -> Weight {
		(208_908_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(15 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Security ParachainStatus (r:1 w:0)
	// Storage: Redeem RedeemRequests (r:1 w:1)
	// Storage: Redeem RedeemPeriod (r:1 w:0)
	// Storage: Security ActiveBlockCount (r:1 w:0)
	// Storage: BTCRelay BestBlockHeight (r:1 w:0)
	// Storage: VaultRegistry Vaults (r:1 w:1)
	// Storage: Oracle Aggregate (r:1 w:0)
	// Storage: Fee PunishmentFee (r:1 w:0)
	// Storage: Staking Nonce (r:1 w:0)
	// Storage: Staking TotalCurrentStake (r:1 w:0)
	// Storage: VaultRegistry TotalUserVaultCollateral (r:1 w:1)
	// Storage: Staking TotalStake (r:1 w:0)
	// Storage: VaultRegistry PunishmentDelay (r:1 w:0)
	fn cancel_redeem_retry() -> Weight {
		(164_398_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(13 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	// Storage: Redeem RedeemPeriod (r:0 w:1)
	fn set_redeem_period() -> Weight {
		(3_288_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}


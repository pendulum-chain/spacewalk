on:
  pull_request:
    branches:
      - 'main'

name: continuous-integration-main
jobs:
  ci:
    runs-on: ubuntu-20.04
    env:
      RUST_BACKTRACE: full
      # Make sure CI fails on all warnings, including Clippy lints
      RUSTFLAGS: "-Dwarnings"

    steps:
      - name: Freeing up more disk space
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          free -h
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo apt-get remove -y 'php.*' --fix-missing
          sudo apt-get remove -y '^mongodb-.*' --fix-missing
          sudo apt-get remove -y '^mysql-.*' --fix-missing
          sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri --fix-missing
          sudo apt-get remove -y google-cloud-sdk --fix-missing
          sudo apt-get remove -y google-cloud-cli --fix-missing   
          df -h
      - uses: actions/checkout@v2

      - name: Install package
        run: |
          sudo docker image prune --all --force
          echo 'APT::Get::Always-Include-Phased-Updates "false";' | sudo tee /etc/apt/apt.conf.d/99-phased-updates
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Setup Rust toolchain
        # Call `rustup show` as a hack so that the toolchain defined in rust-toolchain.toml is installed
        run: rustup show

      - name: Use Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          key: "ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}"
          shared-key: "shared"

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --all-features

      - name: Test
        uses: actions-rs/cargo@v1
        env: 
          SOURCE_STELLAR_SECRET_MAINNET: ${{ secrets.SOURCE_STELLAR_SECRET_MAINNET }}
          SOURCE_STELLAR_SECRET_TESTNET: ${{ secrets.SOURCE_STELLAR_SECRET_TESTNET }}
          DEST_STELLAR_SECRET_MAINNET: ${{ secrets.DEST_STELLAR_SECRET_MAINNET }}
          DEST_STELLAR_SECRET_TESTNET: ${{ secrets.DEST_STELLAR_SECRET_TESTNET }}
        with:
          command: test
          args: --all --all-features

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Clippy -- Main
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-features -- -W clippy::all -A clippy::style -A clippy::forget_copy -A clippy::forget_ref

      - name: Clippy -- All Targets
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          # We are a bit more forgiving when it comes to the code in tests and only check for correctness
          args: --all-features --all-targets -- -A clippy::all -W clippy::correctness -A clippy::forget_copy -A clippy::forget_ref